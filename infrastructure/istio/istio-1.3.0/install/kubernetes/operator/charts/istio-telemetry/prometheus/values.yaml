prometheus:
  enabled: true
  replicaCount: 1
  hub: docker.io/prom
  image: prometheus
  tag: v2.8.0
  retention: 6h

  # Controls the frequency of prometheus scraping
  scrapeInterval: 15s

  contextPath: /prometheus

  ingress:
    enabled: false
    ## Used to create an Ingress record.
    hosts:
      - prometheus.local
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: prometheus-tls
      #   hosts:
      #     - prometheus.local

  # 1.2 it is disabled by default - it can be enabled for special cases, but would create port
  # conflicts. In general it is not recommended to use node ports for services, but use gateways instead.
#  service:
#    annotations: {}
#    nodePort:
#      enabled: false
#      port: 32090

  # Indicate if Citadel is enabled, i.e., whether its generated certificates are available
  security:
    enabled: true

  nodeSelector: {}
  tolerations: []

  # Specify the pod anti-affinity that allows you to constrain which nodes
  # your pod is eligible to be scheduled based on labels on pods that are
  # already running on the node rather than based on labels on nodes.
  # There are currently two types of anti-affinity:
  #    "requiredDuringSchedulingIgnoredDuringExecution"
  #    "preferredDuringSchedulingIgnoredDuringExecution"
  # which denote "hard" vs. "soft" requirements, you can define your values
  # in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
  # correspondingly.
  # For example:
  # podAntiAffinityLabelSelector:
  # - key: security
  #   operator: In
  #   values: S1,S2
  #   topologyKey: "kubernetes.io/hostname"
  # This pod anti-affinity rule says that the pod requires not to be scheduled
  # onto a node if that node is already running a pod with label having key
  # "security" and value "S1".
  podAntiAffinityLabelSelector: []
  podAntiAffinityTermLabelSelector: []
