#.Values.pilot for discovery and mesh wide config

## Discovery Settings
pilot:
  autoscaleEnabled: true
  autoscaleMin: 1
  autoscaleMax: 5
  replicaCount: 1
  rollingMaxSurge: 100%
  rollingMaxUnavailable: 25%

  # Can be a full hub/image:tag
  image: pilot
  traceSampling: 1.0

  # Resources for a small pilot install
  resources:
    requests:
      cpu: 500m
      memory: 2048Mi

  # Namespace for Istio config
  configNamespace: istio-config

  # Applications namespace list pilot manages
  appNamespaces: []

  env:
    GODEBUG: gctrace=1

  cpu:
    targetAverageUtilization: 80

  nodeSelector: {}
  tolerations: []

  # Specify the pod anti-affinity that allows you to constrain which nodes
  # your pod is eligible to be scheduled based on labels on pods that are
  # already running on the node rather than based on labels on nodes.
  # There are currently two types of anti-affinity:
  #    "requiredDuringSchedulingIgnoredDuringExecution"
  #    "preferredDuringSchedulingIgnoredDuringExecution"
  # which denote "hard" vs. "soft" requirements, you can define your values
  # in "podAntiAffinityLabelSelector" and "podAntiAffinityTermLabelSelector"
  # correspondingly.
  # For example:
  # podAntiAffinityLabelSelector:
  # - key: security
  #   operator: In
  #   values: S1,S2
  #   topologyKey: "kubernetes.io/hostname"
  # This pod anti-affinity rule says that the pod requires not to be scheduled
  # onto a node if that node is already running a pod with label having key
  # "security" and value "S1".
  podAntiAffinityLabelSelector: []
  podAntiAffinityTermLabelSelector: []

  # The following is used to limit how long a sidecar can be connected
  # to a pilot. It balances out load across pilot instances at the cost of
  # increasing system churn.
  keepaliveMaxServerConnectionAge: 30m

  # Additional labels to apply to the deployment.
  deploymentLabels:


  ## Mesh config settings

  # Used to override control-plane networs
  meshNetworks:
    networks: {}

  # Install the mesh config map, generated from values.yaml.
  # If false, pilot wil use default values (by default) or user-supplied values.
  configMap: true

  # Controls legacy k8s ingress
  # Only one pilot profile should enable ingress support !!!
  ingress:
    # If empty, node-port is assumed.
    ingressService: istio-ingressgateway
    # DEFAULT: all Ingress resources without annotation or with istio annotation
    # STRICT: only with istio annotation
    # OFF: no ingress or sync.
    ingressControllerMode: "OFF"

    # Value to set on "kubernetes.io/ingress.class" annotations to activate, if mode is STRICT
    # This is required to be different than 'istio' if multiple ingresses are present.
    ingressClass: istio

  telemetry:
    # Will not define mixerCheckServer and mixerReportServer
    enabled: true

  policy:
    # Will not define mixerCheckServer and mixerReportServer
    enabled: false

  # Indicate if Galley is enabled to send MCP queries
  useMCP: true

## Mixer settings
mixer:
  telemetry:
    # Set reportBatchMaxEntries to 0 to use the default batching behavior (i.e., every 100 requests).
    # A positive value indicates the number of requests that are batched before telemetry data
    # is sent to the mixer server
    reportBatchMaxEntries: 100

    # Set reportBatchMaxTime to 0 to use the default batching behavior (i.e., every 1 second).
    # A positive time value indicates the maximum wait time since the last request will telemetry data
    # be batched before being sent to the mixer server
    reportBatchMaxTime: 1s
