---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    api: default
    ksonnet.io/component: application
  name: applications.app.k8s.io
spec:
  group: app.k8s.io
  names:
    kind: Application
    plural: applications
    singular: application
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          type: object
        spec:
          properties:
            assemblyPhase:
              type: string
            componentKinds:
              items:
                type: object
              type: array
            descriptor:
              properties:
                description:
                  type: string
                icons:
                  items:
                    properties:
                      size:
                        type: string
                      src:
                        type: string
                      type:
                        type: string
                    required:
                      - src
                    type: object
                  type: array
                keywords:
                  items:
                    type: string
                  type: array
                links:
                  items:
                    properties:
                      description:
                        type: string
                      url:
                        type: string
                    type: object
                  type: array
                maintainers:
                  items:
                    properties:
                      email:
                        type: string
                      name:
                        type: string
                      url:
                        type: string
                    type: object
                  type: array
                notes:
                  type: string
                owners:
                  items:
                    properties:
                      email:
                        type: string
                      name:
                        type: string
                      url:
                        type: string
                    type: object
                  type: array
                type:
                  type: string
                version:
                  type: string
              type: object
            info:
              items:
                properties:
                  name:
                    type: string
                  type:
                    type: string
                  value:
                    type: string
                  valueFrom:
                    properties:
                      configMapKeyRef:
                        properties:
                          apiVersion:
                            type: string
                          fieldPath:
                            type: string
                          key:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                          namespace:
                            type: string
                          resourceVersion:
                            type: string
                          uid:
                            type: string
                        type: object
                      ingressRef:
                        properties:
                          apiVersion:
                            type: string
                          fieldPath:
                            type: string
                          host:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                          namespace:
                            type: string
                          path:
                            type: string
                          resourceVersion:
                            type: string
                          uid:
                            type: string
                        type: object
                      secretKeyRef:
                        properties:
                          apiVersion:
                            type: string
                          fieldPath:
                            type: string
                          key:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                          namespace:
                            type: string
                          resourceVersion:
                            type: string
                          uid:
                            type: string
                        type: object
                      serviceRef:
                        properties:
                          apiVersion:
                            type: string
                          fieldPath:
                            type: string
                          kind:
                            type: string
                          name:
                            type: string
                          namespace:
                            type: string
                          path:
                            type: string
                          port:
                            format: int32
                            type: integer
                          resourceVersion:
                            type: string
                          uid:
                            type: string
                        type: object
                      type:
                        type: string
                    type: object
                type: object
              type: array
            selector:
              type: object
          type: object
        status:
          properties:
            observedGeneration:
              format: int64
              type: integer
          type: object
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ksonnet.io/component: metacontroller
  name: compositecontrollers.metacontroller.k8s.io
spec:
  group: metacontroller.k8s.io
  names:
    kind: CompositeController
    plural: compositecontrollers
    shortNames:
      - cc
      - cctl
    singular: compositecontroller
  scope: Cluster
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ksonnet.io/component: metacontroller
  name: controllerrevisions.metacontroller.k8s.io
spec:
  group: metacontroller.k8s.io
  names:
    kind: ControllerRevision
    plural: controllerrevisions
    singular: controllerrevision
  scope: Namespaced
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    ksonnet.io/component: metacontroller
  name: decoratorcontrollers.metacontroller.k8s.io
spec:
  group: metacontroller.k8s.io
  names:
    kind: DecoratorController
    plural: decoratorcontrollers
    shortNames:
      - dec
      - decorators
    singular: decoratorcontroller
  scope: Cluster
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: notebooks.kubeflow.org
spec:
  group: kubeflow.org
  names:
    kind: Notebook
    plural: notebooks
    singular: notebook
  scope: Namespaced
  subresources:
    status: {}
  version: v1alpha1
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: profiles.kubeflow.org
spec:
  group: kubeflow.org
  names:
    kind: Profile
    plural: profiles
    shortNames:
      - prf
    singular: profile
  scope: Cluster
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          type: object
        spec:
          properties:
            namespace:
              type: string
            owner:
              properties:
                apiGroup:
                  type: string
                kind:
                  enum:
                    - ServiceAccount
                    - User
                name:
                  type: string
                namespace:
                  type: string
              required:
                - kind
                - name
              type: object
          type: object
        status:
          properties:
            observedGeneration:
              format: int64
              type: integer
          type: object
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pytorchjobs.kubeflow.org
spec:
  additionalPrinterColumns:
    - JSONPath: .status.conditions[-1:].type
      name: State
      type: string
    - JSONPath: .metadata.creationTimestamp
      name: Age
      type: date
  group: kubeflow.org
  names:
    kind: PyTorchJob
    plural: pytorchjobs
    singular: pytorchjob
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            pytorchReplicaSpecs:
              properties:
                Master:
                  properties:
                    replicas:
                      maximum: 1
                      minimum: 1
                      type: integer
                Worker:
                  properties:
                    replicas:
                      minimum: 1
                      type: integer
  version: v1beta2
  versions:
    - name: v1beta2
      served: true
      storage: true
    - name: v1beta1
      served: true
      storage: false
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: scheduledworkflows.kubeflow.org
spec:
  group: kubeflow.org
  names:
    kind: ScheduledWorkflow
    listKind: ScheduledWorkflowList
    plural: scheduledworkflows
    shortNames:
      - swf
    singular: scheduledworkflow
  scope: Namespaced
  versions:
    - name: v1beta1
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: studyjobs.kubeflow.org
spec:
  additionalPrinterColumns:
    - JSONPath: .status.condition
      name: Condition
      type: string
    - JSONPath: .metadata.creationTimestamp
      name: Age
      type: date
  group: kubeflow.org
  names:
    kind: StudyJob
    plural: studyjobs
    singular: studyjob
  scope: Namespaced
  version: v1alpha1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tfjobs.kubeflow.org
spec:
  additionalPrinterColumns:
    - JSONPath: .status.conditions[-1:].type
      name: State
      type: string
    - JSONPath: .metadata.creationTimestamp
      name: Age
      type: date
  group: kubeflow.org
  names:
    kind: TFJob
    plural: tfjobs
    singular: tfjob
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            tfReplicaSpecs:
              properties:
                Chief:
                  properties:
                    replicas:
                      maximum: 1
                      minimum: 1
                      type: integer
                PS:
                  properties:
                    replicas:
                      minimum: 1
                      type: integer
                Worker:
                  properties:
                    replicas:
                      minimum: 1
                      type: integer
  version: v1beta1
  versions:
    - name: v1beta1
      served: true
      storage: true
    - name: v1beta2
      served: true
      storage: false
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: viewers.kubeflow.org
spec:
  group: kubeflow.org
  names:
    kind: Viewer
    listKind: ViewerList
    plural: viewers
    shortNames:
      - vi
    singular: viewer
  scope: Namespaced
  versions:
    - name: v1beta1
      served: true
      storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: workflows.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: Workflow
    listKind: WorkflowList
    plural: workflows
    shortNames:
      - wf
    singular: workflow
  scope: Namespaced
  version: v1alpha1
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: alb-ingress-controller
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: alb-ingress-controller
rules:
  - apiGroups:
      - ""
      - extensions
    resources:
      - configmaps
      - endpoints
      - events
      - ingresses
      - ingresses/status
      - services
    verbs:
      - create
      - get
      - list
      - update
      - watch
      - patch
  - apiGroups:
      - ""
      - extensions
    resources:
      - nodes
      - pods
      - secrets
      - services
      - namespaces
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: centraldashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: centraldashboard
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - events
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-web-app-cluster-role
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - create
      - delete
  - apiGroups:
      - kubeflow.org
    resources:
      - notebooks
    verbs:
      - get
      - list
      - create
      - delete
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - create
      - delete
      - get
      - list
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - get
      - list
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: katib-ui
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - '*'
  - apiGroups:
      - kubeflow.org
    resources:
      - studyjobs
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: metrics-collector
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - pods/status
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: notebooks-controller
rules:
  - apiGroups:
      - apps
    resources:
      - statefulsets
      - deployments
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - services
      - pods
    verbs:
      - '*'
  - apiGroups:
      - kubeflow.org
    resources:
      - notebooks
      - notebooks/status
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: studyjob-controller
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - serviceaccounts
      - services
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - '*'
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - get
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - '*'
  - apiGroups:
      - kubeflow.org
    resources:
      - studyjobs
    verbs:
      - '*'
  - apiGroups:
      - kubeflow.org
    resources:
      - tfjobs
      - pytorchjobs
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - pods/status
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ambassador
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - update
      - patch
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: argo
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: argo
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - create
      - delete
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      - get
      - list
      - watch
      - update
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: argo
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: argo-ui
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
      - pods/log
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: ml-pipeline-persistenceagent
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-persistenceagent
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - kubeflow.org
    resources:
      - scheduledworkflows
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: ml-pipeline-viewer-crd
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-viewer-controller-role
rules:
  - apiGroups:
      - '*'
    resources:
      - deployments
      - services
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - kubeflow.org
    resources:
      - viewers
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: pipeline-runner
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pipeline-runner
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - ""
    resources:
      - persistentvolumeclaims
    verbs:
      - create
      - delete
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
      - pods/log
      - services
    verbs:
      - '*'
  - apiGroups:
      - ""
      - apps
      - extensions
    resources:
      - deployments
      - replicasets
    verbs:
      - '*'
  - apiGroups:
      - kubeflow.org
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: pytorch-operator
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pytorch-operator
rules:
  - apiGroups:
      - kubeflow.org
    resources:
      - pytorchjobs
      - pytorchjobs/status
    verbs:
      - '*'
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - '*'
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - events
    verbs:
      - '*'
  - apiGroups:
      - apps
      - extensions
    resources:
      - deployments
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: spartakus
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: spartakus
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: tf-job-dashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-dashboard
rules:
  - apiGroups:
      - tensorflow.org
      - kubeflow.org
    resources:
      - tfjobs
      - tfjobs/status
    verbs:
      - '*'
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - '*'
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - events
      - pods/log
      - namespaces
    verbs:
      - '*'
  - apiGroups:
      - apps
      - extensions
    resources:
      - deployments
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app: tf-job-operator
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-operator
rules:
  - apiGroups:
      - tensorflow.org
      - kubeflow.org
    resources:
      - tfjobs
      - tfjobs/status
    verbs:
      - '*'
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - '*'
  - apiGroups:
      - storage.k8s.io
    resources:
      - storageclasses
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - services
      - endpoints
      - persistentvolumeclaims
      - events
    verbs:
      - '*'
  - apiGroups:
      - apps
      - extensions
    resources:
      - deployments
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: vizier-core
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
      - nodes/*
      - pods/log
      - pods/status
      - services
      - persistentvolumes
      - persistentvolumes/status
      - persistentvolumeclaims
      - persistentvolumeclaims/status
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
      - jobs/status
    verbs:
      - '*'
  - apiGroups:
      - extensions
    resources:
      - ingresses
      - ingresses/status
      - deployments
      - deployments/status
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: alb-ingress-controller
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: alb-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alb-ingress-controller
subjects:
  - kind: ServiceAccount
    name: alb-ingress-controller
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: centraldashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: centraldashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: centraldashboard
subjects:
  - kind: ServiceAccount
    name: centraldashboard
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-web-app-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jupyter-web-app-cluster-role
subjects:
  - kind: ServiceAccount
    name: jupyter-web-app
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: katib-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: katib-ui
subjects:
  - kind: ServiceAccount
    name: katib-ui
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    ksonnet.io/component: metacontroller
  name: meta-controller-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: meta-controller-service
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: metrics-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: metrics-collector
subjects:
  - kind: ServiceAccount
    name: metrics-collector
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: notebooks-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: notebooks-controller
subjects:
  - kind: ServiceAccount
    name: notebook-controller
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: profile-controller-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: profiles
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: studyjob-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: studyjob-controller
subjects:
  - kind: ServiceAccount
    name: studyjob-controller
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ambassador
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador
subjects:
  - kind: ServiceAccount
    name: ambassador
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: argo
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: argo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo
subjects:
  - kind: ServiceAccount
    name: argo
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: argo-ui
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: argo-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-ui
subjects:
  - kind: ServiceAccount
    name: argo-ui
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ml-pipeline-persistenceagent
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-persistenceagent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: ml-pipeline-persistenceagent
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ml-pipeline-scheduledworkflow
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-scheduledworkflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: ml-pipeline-scheduledworkflow
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: ml-pipeline-viewer-crd
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-viewer-crd-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ml-pipeline-viewer-controller-role
subjects:
  - kind: ServiceAccount
    name: ml-pipeline-viewer-crd-service-account
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: pipeline-runner
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pipeline-runner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pipeline-runner
subjects:
  - kind: ServiceAccount
    name: pipeline-runner
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: pytorch-operator
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pytorch-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pytorch-operator
subjects:
  - kind: ServiceAccount
    name: pytorch-operator
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: spartakus
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: spartakus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spartakus
subjects:
  - kind: ServiceAccount
    name: spartakus
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: tf-job-dashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tf-job-dashboard
subjects:
  - kind: ServiceAccount
    name: tf-job-dashboard
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app: tf-job-operator
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tf-job-operator
subjects:
  - kind: ServiceAccount
    name: tf-job-operator
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: vizier-core
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vizier-core
subjects:
  - kind: ServiceAccount
    name: vizier-core
    namespace: kubeflow
---
apiVersion: metacontroller.k8s.io/v1alpha1
kind: CompositeController
metadata:
  labels:
    ksonnet.io/component: application
  name: kfapp-controller
spec:
  childResources:
    - apiVersion: v1
      resource: configmaps
      updateStrategy:
        method: InPlace
    - apiVersion: apps/v1
      resource: deployments
      updateStrategy:
        method: InPlace
    - apiVersion: networking.istio.io/v1alpha3
      resource: gateways
      updateStrategy:
        method: InPlace
    - apiVersion: extensions/v1beta1
      resource: ingresss
      updateStrategy:
        method: InPlace
    - apiVersion: v1
      resource: persistentvolumeclaims
      updateStrategy:
        method: InPlace
    - apiVersion: rbac.authorization.k8s.io/v1
      resource: rolebindings
      updateStrategy:
        method: InPlace
    - apiVersion: rbac.authorization.k8s.io/v1
      resource: roles
      updateStrategy:
        method: InPlace
    - apiVersion: v1
      resource: secrets
      updateStrategy:
        method: InPlace
    - apiVersion: v1
      resource: serviceaccounts
      updateStrategy:
        method: InPlace
    - apiVersion: v1
      resource: services
      updateStrategy:
        method: InPlace
    - apiVersion: apps/v1beta1
      resource: statefulsets
      updateStrategy:
        method: InPlace
    - apiVersion: networking.istio.io/v1alpha3
      resource: virtualservices
      updateStrategy:
        method: InPlace
  hooks:
    sync:
      webhook:
        url: http://kfapp-controller.kubeflow/sync-application
  parentResource:
    apiVersion: app.k8s.io/v1beta1
    resource: applications
  resyncPeriodSeconds: 10
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    kubernetes.io/ingress.class: alb
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: istio-ingress
  namespace: istio-system
spec:
  rules:
    - http:
        paths:
          - backend:
              serviceName: istio-ingressgateway
              servicePort: 80
            path: /*
---
apiVersion: v1
data:
  accesskey: bWluaW8=
  secretkey: bWluaW8xMjM=
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: mlpipeline-minio-artifact
  namespace: kubeflow
type: Opaque
---
apiVersion: v1
data:
  MYSQL_ROOT_PASSWORD: dGVzdA==
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: vizier-db-secrets
  namespace: kubeflow
type: Opaque
---
apiVersion: v1
data:
  jupyter_config.py: |
    # -*- coding: utf-8 -*-
    """
    Configuration file for JupyterHub.

    Kubeflow uses this file as the configuration file for JupyterHub. It contains
    all glue code necessary to integrate JupyterHub with the remaining Kubeflow
    components.

    Note that this file is also responsible for importing the UI-specific Spawner
    class from <ui-dir>/spawner.py, and setting the `spawner_class` configuration
    option.
    """

    import os
    from importlib.util import spec_from_file_location, module_from_spec
    from jhub_remote_user_authenticator.remote_user_auth import     RemoteUserAuthenticator

    SERVICE_ACCOUNT_SECRET_MOUNT = '/var/run/secrets/sa'

    # Import the UI-specific Spawner
    spec = spec_from_file_location('spawner', '/etc/config/spawner.py')
    spawner = module_from_spec(spec)
    spec.loader.exec_module(spawner)

    ###################################################
    # JupyterHub Options
    ###################################################
    c.JupyterHub.ip = '0.0.0.0'
    c.JupyterHub.hub_ip = '0.0.0.0'
    # Don't try to cleanup servers on exit - since in general for k8s, we want
    # the hub to be able to restart without losing user containers
    c.JupyterHub.cleanup_servers = False
    ###################################################

    ###################################################
    # Spawner Options
    ###################################################
    c.JupyterHub.spawner_class = spawner.KubeFormSpawner

    c.KubeSpawner.cmd = 'start-singleuser.sh'
    c.KubeSpawner.args = ['--allow-root']
    # gpu images are very large ~15GB. need a large timeout.
    c.KubeSpawner.start_timeout = 60 * 30
    # Increase timeout to 5 minutes to avoid HTTP 500 errors on JupyterHub
    c.KubeSpawner.http_timeout = 60 * 5

    # Volume setup
    c.KubeSpawner.singleuser_uid = 1000
    c.KubeSpawner.singleuser_fs_gid = 100
    c.KubeSpawner.singleuser_working_dir = '/home/jovyan'

    # Allow environment vars to override uid and gid.
    # This allows local host path mounts to be read/writable
    env_uid = os.environ.get('NOTEBOOK_UID')
    if env_uid:
      c.KubeSpawner.singleuser_uid = int(env_uid)
    env_gid = os.environ.get('NOTEBOOK_GID')
    if env_gid:
      c.KubeSpawner.singleuser_fs_gid = int(env_gid)
    access_local_fs = os.environ.get('ACCESS_LOCAL_FS')
    if access_local_fs == 'true':

      def modify_pod_hook(spawner, pod):
        pod.spec.containers[0].lifecycle = {
            'postStart': {
                'exec': {
                    'command': [
                        'ln', '-s', '/mnt/local-notebooks',
                        '/home/jovyan/local-notebooks'
                    ]
                }
            }
        }
        return pod

      c.KubeSpawner.modify_pod_hook = modify_pod_hook

    ###################################################
    # Persistent volume options
    ###################################################

    # Set user_storage_pvc_ensure to False to prevent KubeSpawner from handling PVCs
    # We natively handle PVCs via KubeFormSpawner and its dedicated methods

    # NOTE: user_storage_pvc_ensure has been deprecated in a future release
    c.KubeSpawner.storage_pvc_ensure = False
    c.KubeSpawner.user_storage_pvc_ensure = False

    volumes = []
    volume_mounts = []

    gcp_secret_name = os.environ.get('GCP_SECRET_NAME')
    if gcp_secret_name:
      volumes.append({
          'name': gcp_secret_name,
          'secret': {
              'secretName': gcp_secret_name,
          }
      })
      volume_mounts.append({
          'name': gcp_secret_name,
          'mountPath': SERVICE_ACCOUNT_SECRET_MOUNT
      })

    c.KubeSpawner.volumes = volumes
    c.KubeSpawner.volume_mounts = volume_mounts

    storage_class = None
    if os.environ.get('STORAGE_CLASS') != 'null':
      storage_class = os.environ.get('STORAGE_CLASS')

    rok_secret_name = ''
    if os.environ.get('ROK_SECRET_NAME') != 'null':
      rok_secret_name = os.environ.get('ROK_SECRET_NAME')

    # Set both service_account and singleuser_service_account because
    # singleuser_service_account has been deprecated in a future release
    c.KubeSpawner.service_account = 'jupyter-notebook'
    c.KubeSpawner.singleuser_service_account = 'jupyter-notebook'
    # Authenticator
    if os.environ.get('KF_AUTHENTICATOR') == 'iap':
      c.JupyterHub.authenticator_class = RemoteUserAuthenticator
      c.RemoteUserAuthenticator.header_name = 'x-goog-authenticated-user-email'
    else:
      c.JupyterHub.authenticator_class = 'dummyauthenticator.DummyAuthenticator'

    if os.environ.get('DEFAULT_JUPYTERLAB').lower() == 'true':
      c.KubeSpawner.default_url = '/lab'

    # Set extra spawner configuration variables
    c.KubeSpawner.extra_spawner_config = {
        'gcp_secret_name': gcp_secret_name,
        'storage_class': storage_class,
        'rok_secret_name': rok_secret_name,
    }
  script.js: |
    // This function is executed when the document is ready
    $(function() {

      // Toggle advanced options inside the Spawner form
      $('#toggle_advanced_options').on('click', function(e) {
        $('#advanced_fields').toggle();
      });

      // Resize Spawner form to take up more page width
      $('.row.col-sm-offset-2.col-sm-8').attr({
        'class': 'row col-sm-offset-1 col-sm-10',
        'style': 'padding: 15px;'
      });

      // Update upper-right sign-out icon to FontAwesome 5
      $('.fa.fa-sign-out').attr('class', 'fas fa-sign-out-alt');

      // Update Spawn button text upon form submission
      if (formDefaults) {
        $('#spawn_form').one('submit', function() {
          $(this).find('input[type="submit"]')
          .attr('disabled', true)
          .val('Spawning...');
        });
      } else {
        $("h1:contains('Spawner Options')" ).remove();
        $('#spawn_form').find('input[type="submit"]').remove();
      }

      // Configure Image input elements
      setImageType();

      // Dynamically change Workspace form fields behavior
      setWorkspaceEventListeners();

      // Fill the form with values defined in the YAML config file
      setDefaultFormValues();

      // Set tooltip to readOnly form fields
      setTooltipsOnImmutable();
    });

    // Dynamically update Image input field, based on radio button selection
    function setImageType() {
      imageType = $('#imageType').find('input:checked').val();
      if (imageType == 'standard') {
        $('select[for=standardImages]')
          .attr({'id': 'image', 'name': 'image'}).css({'display': ''});
        $('input[for=customImage]')
          .attr({'id': '', 'name': ''}).removeAttr('required').css({'display': 'none'});
      } else {
        $('input[for=customImage]')
          .attr({'id': 'image', 'name': 'image'}).css({'display': ''});
        $('select[for=standardImages]')
          .attr({'id': '', 'name': ''}).removeAttr('required').css({'display': 'none'});
      }
    }

    // Set default values to form fields
    function setDefaultFormValues() {

      // If config.yaml is empty, no need to initialize anything
      if (!formDefaults) {
        return;
      }

      if ('image' in formDefaults) {
        // Set Container image dropdown list
        if ('options' in formDefaults.image) {
          formDefaults.image.options.forEach(function(item) {
            $('#image').append($('<option/>').attr('value', item).text(item));
          });
        }
        // Set default Container Image, if specified
        $('#image').val('');
        if ('value' in formDefaults.image) {
          $('#image').val(formDefaults.image.value);
        }

        // Make Container Image field readonly, if specified
        if ('readOnly' in formDefaults.image) {
          $('#option_standard').prop({
              'disabled': formDefaults.image.readOnly,
              'immutable': formDefaults.image.readOnly
          });
          $('#option_custom').prop({
              'disabled': formDefaults.image.readOnly,
              'immutable': formDefaults.image.readOnly
          });
        }
      }

      if ('cpu' in formDefaults) {
        // Set default CPU, if specified
        $('#cpu').val('');
        if ('value' in formDefaults.cpu) {
          $('#cpu').val(formDefaults.cpu.value);
        }
        // Make CPU field readonly, if specified
        if ('readOnly' in formDefaults.cpu) {
          $('#cpu').attr({
            'readonly': formDefaults.cpu.readOnly,
            'immutable': formDefaults.cpu.readOnly
          });
        }
      }

      if ('memory' in formDefaults) {
        // Set default Memory, if specified
        $('#memory').val('');
        if ('value' in formDefaults.memory) {
          $('#memory').val(formDefaults.memory.value);
        }
        // Make Memory field readonly if specified
        if ('readOnly' in formDefaults.memory) {
          $('#memory').attr({
            'readonly': formDefaults.memory.readOnly,
            'immutable': formDefaults.memory.readOnly
          });
        }
      }

      $('#ws_name').attr('placeholder', username + '-workspace');
      $('#ws_mount_path').attr('placeholder', '/home/jovyan');

      if ('workspaceVolume' in formDefaults) {
        var defaultWorkspaceReadOnly = formDefaults.workspaceVolume.readOnly

        if ('value' in formDefaults.workspaceVolume) {
          var defaultWorkspace = formDefaults.workspaceVolume.value;
          // Set the default Workspace Volume, if specified
          if (defaultWorkspace) {
            if ('type' in defaultWorkspace) {
              // Set the Workspace Volume Type, if specified
              $('#ws_type').val('');
              if ('value' in defaultWorkspace.type) {
                $('#ws_type').val(defaultWorkspace.type.value);
              }
              // Make the Workspace Volume Type readonly, if specified
              if ('readOnly' in defaultWorkspace.type || 'readOnly' in formDefaults.workspaceVolume) {
                $('#ws_type').attr({
                  'readonly': defaultWorkspace.type.readOnly || defaultWorkspaceReadOnly,
                  'immutable': defaultWorkspace.type.readOnly || defaultWorkspaceReadOnly
                });
                if ($('#ws_type').attr('readonly')) {
                  $('#ws_type').on('mousedown', function(e) {
                    e.preventDefault(); this.blur(); window.focus();
                  });
                }
              }
            }
            $('#ws_type').trigger('change');

            if ('name' in defaultWorkspace) {
              $('#ws_name').val('');
              // Set the Workspace Volume Name, if specified
              if ('value' in defaultWorkspace.name) {
                $('#ws_name').val(defaultWorkspace.name.value).trigger('focusout');
              }
              // Make the Workspace Volume Name readonly, if specified
              if ('readOnly' in defaultWorkspace.name || 'readOnly' in formDefaults.workspaceVolume) {
                $('#ws_name').attr({
                  'readonly': defaultWorkspace.name.readOnly || defaultWorkspaceReadOnly,
                  'immutable': defaultWorkspace.name.readOnly || defaultWorkspaceReadOnly
                });
              }
            }

            if ('size' in defaultWorkspace) {
              $('#ws_size').val('');
              // Set the Workspace Volume Size, if specified
              if ('value' in defaultWorkspace.size) {
                $('#ws_size').val(defaultWorkspace.size.value);
              }
              // Make the Workspace Volume Size readonly, if specified
              if ('readOnly' in defaultWorkspace.size || 'readOnly' in formDefaults.workspaceVolume) {
                $('#ws_size').attr({
                  'readonly': defaultWorkspace.size.readOnly || defaultWorkspaceReadOnly,
                  'immutable': defaultWorkspace.size.readOnly || defaultWorkspaceReadOnly
                });
              }
            }

            if ('mountPath' in defaultWorkspace) {
              $('#ws_mount_path').val('');
              // Set the Workspace Volume MountPath, if specified
              if ('value' in defaultWorkspace.mountPath) {
                $('#ws_mount_path').val(defaultWorkspace.mountPath.value);
              }
              // Make the Workspace Volume MountPath readonly, if specified
              if ('readOnly' in defaultWorkspace.mountPath || 'readOnly' in formDefaults.workspaceVolume) {
                $('#ws_mount_path').attr({
                  'readonly': defaultWorkspace.mountPath.readOnly || defaultWorkspaceReadOnly,
                  'immutable': defaultWorkspace.mountPath.readOnly || defaultWorkspaceReadOnly
                });
              }
            }

            if ('accessModes' in defaultWorkspace) {
              $('#ws_access_modes').val('');
              // Set the Workspace Volume Access Modes, if specified
              if ('value' in defaultWorkspace.accessModes) {
                $('#ws_access_modes').val(defaultWorkspace.accessModes.value);
              }
              // Make the Workspace Volume Access Modes readonly, if specified
              if ('readOnly' in defaultWorkspace.accessModes || 'readOnly' in formDefaults.workspaceVolume) {
                $('#ws_access_modes').attr({
                  'readonly': defaultWorkspace.accessModes.readOnly || defaultWorkspaceReadOnly,
                  'immutable': defaultWorkspace.accessModes.readOnly || defaultWorkspaceReadOnly
                });
                if ($('#ws_access_modes').attr('readonly')) {
                  $('#ws_access_modes').on('mousedown', function(e) {
                    e.preventDefault(); this.blur();  window.focus();
                  });
                }
              }
            }
          }
        }
      }

      if ('dataVolumes' in formDefaults) {
          var dataVolumesReadOnly = formDefaults.dataVolumes.readOnly
          // Disable Add Volume button, if specified
          if ('readOnly' in formDefaults.dataVolumes) {
            $('#add_volume').attr({
              'disabled': dataVolumesReadOnly,
              'immutable': dataVolumesReadOnly
            });
          }

          // Set default Data Volumes - Disable if specified
          var defaultDataVolumes = []
          if ('value' in formDefaults.dataVolumes) {
            defaultDataVolumes = formDefaults.dataVolumes.value;
          }
          for (i = 0; i < defaultDataVolumes.length; i++) {
            addVolume();

            var vol = {}
            if ('value' in defaultDataVolumes[i]) {
              vol = defaultDataVolumes[i].value;
            }

            if ('type' in vol) {
              $('#vol_type' + counter).val('');
              if ('value' in vol.type) {
                $('#vol_type' + counter).val(vol.type.value).trigger('change');
              }
              if ('readOnly' in vol.type || 'readOnly' in formDefaults.dataVolumes) {
                $('#vol_type' + counter).attr({
                  'readonly': vol.type.readOnly || dataVolumesReadOnly,
                  'immutable': vol.type.readOnly || dataVolumesReadOnly
                });
                if ($('#vol_type' + counter).attr('readonly')) {
                  $('#vol_type' + counter).on('mousedown', function(e) {
                    e.preventDefault(); this.blur(); window.focus();
                  });
                }
              }
            }

            if ('name' in vol) {
              $('#vol_name' + counter).val('');
              if ('value' in vol.name) {
                $('#vol_name' + counter).val(vol.name.value).trigger('focusout');
              }
              if ('readOnly' in vol.name || 'readOnly' in formDefaults.dataVolumes) {
                $('#vol_name' + counter).attr({
                  'readonly': vol.name.readOnly || dataVolumesReadOnly,
                  'immutable': vol.name.readOnly || dataVolumesReadOnly
                });
              }
            }

            if ('size' in vol) {
              $('#vol_size' + counter).val('');
              if ('value' in vol.size) {
                $('#vol_size' + counter).val(vol.size.value);
              }
              if ('readOnly' in vol.size || 'readOnly' in formDefaults.dataVolumes) {
                $('#vol_size' + counter).attr({
                  'readonly': vol.size.readOnly || dataVolumesReadOnly,
                  'immutable': vol.size.readOnly || dataVolumesReadOnly
                });
              }
            }

            if ('mountPath' in vol) {
              $('#vol_mount_path' + counter).val('');
              if ('value' in vol.mountPath) {
                $('#vol_mount_path' + counter).val(vol.mountPath.value);
              }
              if ('readOnly' in vol.mountPath || 'readOnly' in formDefaults.dataVolumes) {
                $('#vol_mount_path' + counter).attr({
                  'readonly': vol.mountPath.readOnly || dataVolumesReadOnly,
                  'immutable': vol.mountPath.readOnly || dataVolumesReadOnly
                });
              }
            }

            if ('accessModes' in vol) {
              $('#vol_access_modes' + counter).val('');
              if ('value' in vol.accessModes) {
                $('#vol_access_modes' + counter).val(vol.accessModes.value);
              }
              if ('readOnly' in vol.accessModes || 'readOnly' in formDefaults.dataVolumes) {
                $('#vol_access_modes' + counter).attr({
                  'readonly': vol.accessModes.readOnly || dataVolumesReadOnly,
                  'immutable': vol.accessModes.readOnly || dataVolumesReadOnly
                });
                if ($('#vol_access_modes' + counter).attr('readonly')) {
                  $('#vol_access_modes' + counter).on('mousedown', function(e) {
                    e.preventDefault(); this.blur(); window.focus();
                  });
                }
              }
            }

            // Disable Delete button, if specified
            if ('readOnly' in formDefaults.dataVolumes) {
              $('#vol_delete_button' + counter).attr({
                'disabled': formDefaults.dataVolumes.readOnly,
                'immutable': formDefaults.dataVolumes.readOnly
              });
            }
          }
      }

      if ('extraResources' in formDefaults) {
        // Set default Extra Resources, if specified
        $('#extraResources').val('{}');
        if ('value' in formDefaults.extraResources) {
          $('#extraResources').val(formDefaults.extraResources.value);
        }
        // Make Extra Resources field readonly, if specified
        if ('readOnly' in formDefaults.extraResources) {
          $('#extraResources').attr({
            'readonly': formDefaults.extraResources.readOnly,
            'immutable': formDefaults.extraResources.readOnly
          });
        }
      }
    }

    // Register jQuery event listeners for the Workspace Volume
    function  setWorkspaceEventListeners() {
      var workspaceType = $('#ws_type');
      var workspaceName = $('#ws_name');
      var workspaceSize = $('#ws_size');
      var workspaceAccessModes = $('#ws_access_modes');
      var workspaceMountPath = $('#ws_mount_path');

      // Disable/Enable Workspace size option based on its Type
      workspaceType.on('change', function() {
        // Set attributes for the Volume fields
        if (this.value == 'Existing') {
          setAttributes(workspaceName, {'list': 'suggest_pvcs'});
          setAttributes(workspaceSize, {
            'readonly': true,
            'data-toggle': 'tooltip', 'data-placement': 'top',
            'title': 'Size is autofilled when mounting existing Volumes'
          });
          setAttributes(workspaceAccessModes, {
            'readonly': true,
            'data-toggle': 'tooltip', 'data-placement': 'top',
            'title': 'Access Mode is autofilled when mounting existing Volumes'
          });
          $('#ws_access_modes option').not(':selected').attr('disabled', 'disabled')
        } else if (this.value == 'New') {
          setAttributes(workspaceName, {'list': 'suggest_pvcs_disabled'});
          unsetAttributes(workspaceSize, 'readonly data-toggle data-placement title');
          unsetAttributes(workspaceAccessModes, 'readonly data-toggle data-placement title');
        }

        // Set values for non-readonly Volume fields
        setValue(workspaceName, '');
        setValue(workspaceSize, workspaceSize.attr('placeholder'));
        setValue(workspaceMountPath, '');
        setValue(workspaceAccessModes, workspaceAccessModes.find('option:first').val());
      });

      workspaceName.on('focusout', function() {
        for (var i = 0; i < existingPVCs.length; i++) {
          if (existingPVCs[i].name == this.value) {
            // Volume already exists - autocomplete its Size and Access Mode
            setValue(workspaceType, 'Existing');
            setAttributes(workspaceName, {'list': 'suggest_pvcs'});
            setAttributes(workspaceSize, {
              'readonly': true,
              'data-toggle': 'tooltip', 'data-placement': 'top',
              'title': 'Size is autofilled when mounting existing Volumes'
            });
            setValue(workspaceSize, existingPVCs[i].size);
            setAttributes(workspaceAccessModes, {
              'readonly': true,
              'data-toggle': 'tooltip', 'data-placement': 'top',
              'title': 'Access Mode is autofilled when mounting existing Volumes'
            });
            setValue(workspaceAccessModes, existingPVCs[i].access_modes);
            break;
          }
        }

        if (this.value.length > 0) {
          setValue(workspaceMountPath, '/home/jovyan/' + this.value);
        } else {
          setValue(workspaceMountPath, '' + this.value);
        }

        if (i == existingPVCs.length) {
          // Volume does not exist - set its Type to 'New'
          setValue(workspaceType, 'New');
          setAttributes(workspaceName, {'list': 'suggest_pvcs_disabled'});
          unsetAttributes(workspaceSize, 'readonly data-toggle data-placement title');
          setValue(workspaceSize, '');
          unsetAttributes(workspaceAccessModes, 'readonly data-toggle data-placement title');
          setValue(workspaceAccessModes, workspaceAccessModes.find('option:first').val());
        }
      });

      // Trigger focusout event to check the Workspace name
      workspaceName.trigger('focusout');
    }

    // Counter and options for Dataset Volumes
    var counter = 0;
    var options = [
      'vol_type', 'vol_name', 'vol_size', 'vol_mount_path', 'vol_access_modes'
    ];

    // Dynamically adds a UI element for configuring a volume
    function addVolume() {
      counter++;

      // Input for volume type
      var volumeType = $('<select>').attr({
        class: 'form-control',
        id: 'vol_type' + counter,
        name: 'vol_type' + counter,
        required: true
      });

      volumeType
        .append($('<option/>').attr({selected: true, value: 'New'}).text('New'))
        .append($('<option/>').attr({value: 'Existing'}).text('Existing'));

      // Input for volume name
      var volumeName = $('<input>').attr({
        class: 'form-control',
        id: 'vol_name' + counter,
        name: 'vol_name' + counter,
        type: 'text',
        placeholder: username + '-volume-' + counter,
        list: 'suggest_pvcs_disabled',
        value: username + '-volume-' + counter,
        required: true
      });

      // Input for volume size
      var volumeSize = $('<input>').attr({
        class: 'form-control',
        id: 'vol_size' + counter,
        name: 'vol_size' + counter,
        type: 'number',
        min: '0',
        step: '0.5',
        placeholder: '10',
        value: '10',
        required: true
      });

      // Input for volume mount point
      var volumeMountPath = $('<input>').attr({
        class: 'form-control',
        id: 'vol_mount_path' + counter,
        name: 'vol_mount_path' + counter,
        type: 'text',
        placeholder: '/home/jovyan/' + username + '-volume-' + counter,
        required: true
      });

      // Selection for volume access mode
      var volumeAccessModes = $('<select>').attr({
          class: 'form-control',
          id: 'vol_access_modes' + counter,
          name: 'vol_access_modes' + counter,
          required: true
      });

      volumeAccessModes
        .append($('<option/>').attr({value: 'ReadWriteOnce'}).text('ReadWriteOnce'))
        .append($('<option/>').attr({value: 'ReadWriteMany'}).text('ReadWriteMany'))
        .append($('<option/>').attr({value: 'ReadOnlyMany'}).text('ReadOnlyMany'));

      // Delete button for volume removal
      var deleteButton = $('<button/>').attr({
        class: 'btn btn-danger btn-sm',
        id: 'vol_delete_button' + counter,
        type: 'button',
        onclick: 'removeVolume(' + counter + ');'
      });

      deleteButton.append($('<i>').attr({class: 'fas fa-minus'}));

      // Disable/Enable Volume size option based on its Type
      volumeType.on('change', function() {
        if (this.value == 'Existing') {
          // Set attributes for the Volume fields
          setAttributes(volumeName, {'list': 'suggest_pvcs'});
          setAttributes(volumeSize, {
            'readonly': true,
            'data-toggle': 'tooltip', 'data-placement': 'top',
            'title': 'Size is autofilled when mounting existing Volumes'
          });
          setAttributes(volumeAccessModes, {
            'readonly': true,
            'data-toggle': 'tooltip', 'data-placement': 'top',
            'title': 'Access Mode is autofilled when mounting existing Volumes'
          });
          $('#vol_access_modes option').not(':selected').attr('disabled', 'disabled')
        } else if (this.value == 'New') {
          setAttributes(volumeName, {'list': 'suggest_pvcs_disabled'});
          unsetAttributes(volumeSize, 'readonly data-toggle data-placement title');
          unsetAttributes(volumeAccessModes, 'readonly data-toggle data-placement title');
        }

        // Set values for non-readonly Volume fields
        setValue(volumeName, '');
        setValue(volumeSize, volumeSize.attr('placeholder'));
        setValue(volumeMountPath, '');
        setValue(volumeAccessModes, volumeAccessModes.find('option:first').val());
      });

      volumeName.on('focusout', function() {
        for (var i = 0; i < existingPVCs.length; i++) {
          if (existingPVCs[i].name == this.value) {
            // Volume already exists - autocomplete its Size and Access Mode
            setValue(volumeType, 'Existing');
            setAttributes(volumeName, {'list': 'suggest_pvcs'});
            setAttributes(volumeSize, {
              'readonly': true,
              'data-toggle': 'tooltip', 'data-placement': 'top',
              'title': 'Size is autofilled when mounting existing Volumes'
            });
            setValue(volumeSize, existingPVCs[i].size)
            setAttributes(volumeAccessModes, {
              'readonly': true,
              'data-toggle': 'tooltip', 'data-placement': 'top',
              'title': 'Access Mode is autofilled when cloning existing Volumes'
            });
            setValue(volumeAccessModes, existingPVCs[i].access_modes)
            break;
          }
        }

        if (this.value.length > 0) {
          setValue(volumeMountPath, '/home/jovyan/' + this.value);
        } else {
          setValue(volumeMountPath, '' + this.value);
        }

        if (i == existingPVCs.length) {
          // Volume does not exist - set its Type to 'New'
          setValue(volumeType, 'New');
          setAttributes(volumeName, {'list': 'suggest_pvcs_disabled'});
          unsetAttributes(volumeSize, 'readonly data-toggle data-placement title');
          unsetAttributes(volumeAccessModes, 'readonly data-toggle data-placement title');
          setValue(volumeAccessModes, volumeAccessModes.find('option:first').val());
        }
      });

      // Create and append new volume
      $('<div/>', {'class': 'form-group volume' + counter})
        .append($('<div/>', {class: 'col-sm-2 form-group', style: 'width: 14%'}).append(volumeType))
        .append($('<div/>', {class: 'col-sm-3 form-group', style: 'width: 20%'}).append(volumeName))
        .append($('<div/>', {class: 'col-sm-2 form-group', style: 'width: 12%'}).append(volumeSize))
        .append($('<div/>', {class: 'col-sm-3 form-group', style: 'width: 29%'}).append(volumeMountPath))
        .append($('<div/>', {class: 'col-sm-3 form-group', style: 'width: 19%'}).append(volumeAccessModes))
        .append($('<div/>', {class: 'col-sm-1 form-group', style: 'width: 5%; padding: 2px'}).append(deleteButton))
        .hide().fadeIn('fast').appendTo($('#data_volumes'));

      // Trigger focusout event to check Volume Name
      volumeName.trigger('focusout');
    }

    // Dynamically remove a previously added UI element for configuring a volume
    function removeVolume(id) {
      $('.volume' + id).fadeOut('fast', function() {
        $(this).remove();
      });
      counter--;

      // Normalize the IDs of remainder volumes
      for (i = id; i <= counter; i++) {
        var volumeElement = $('.volume' + (i + 1));
        volumeElement.find('#vol_delete_button' + (i + 1)).attr({
          'id': 'vol_delete_button' + i,
          'onclick': 'removeVolume(' + i + ')'
        });

        // Update the class of the Volume
        volumeElement.removeClass('volume' + (i + 1)).addClass('volume' + i);

        // Update the id and name of the Volume options
        options.forEach(function(option) {
          volumeElement.find('#' + option + (i + 1)).attr({
            'id': option + i,
            'name': option + i
          });
        });

        // Update Volume options
        setAttributes(volumeElement.find('[id^=vol_name]'), {
          'placeholder': username + '-volume-' + i,
        });
        setValue(volumeElement.find('[id^=vol_name]'), username + '-volume-' + i)
        setAttributes(volumeElement.find('[id^=vol_mount_path]'), {
          'placeholder': '/home/jovyan/' + username + '-volume-' + i,
        });
        setValue(volumeElement.find('[id^=vol_mount_path]'), '/home/jovyan/' + username + '-volume-' + i)
      }
    }

    // Helper function to set a tooltip to admin-disabled Spawner form fields
    function setTooltipsOnImmutable() {
      $(':input[immutable=true]').attr({
        'data-toggle': 'tooltip',
        'data-placement': 'top',
        'title': 'This option has been set by your administrator'
      });
    }

    // Helper function to set the value of a mutable Spawner option
    function setValue(element, value) {
      if (!element.attr('immutable')) {
        element.val(value);
      }
    }

    // Helper function to set attributes of a mutable Spawner option
    function setAttributes(element, attributes) {
      if (!element.attr('immutable')) {
        element.attr(attributes);
      }
    }

    // Helper function to unset attributes of a mutable Spawner option
    function unsetAttributes(element, attributes) {
      if (!element.attr('immutable')) {
        element.removeAttr(attributes);
      }
    }
  spawner.py: |
    # -*- coding: utf-8 -*-
    import json
    import yaml
    import string
    import escapism
    from tornado import gen
    from traitlets import Dict
    from jinja2 import FileSystemLoader, Environment

    from kubespawner.objects import make_pvc
    from kubespawner.spawner import KubeSpawner
    from kubernetes.client.rest import ApiException

    SERVICE_ACCOUNT_SECRET_MOUNT = '/var/run/secrets/sa'


    class KubeFormSpawner(KubeSpawner):
      """Implement a custom Spawner to spawn pods in a Kubernetes Cluster."""

      def __init__(self, *args, **kwargs):
        """Call init() of parent class and initialize volume lists."""
        super(KubeFormSpawner, self).__init__(*args, **kwargs)
        self.initial_volumes = list(self.volumes)
        self.initial_volume_mounts = list(self.volume_mounts)

      @property
      def spawner_ui_config(self):
        # Read raw YAML file, format it and parse it as dict
        if not hasattr(self, "_spawner_ui_config"):
          c = None
          try:
            with open('/etc/config/spawner_ui_config.yaml', 'r') as f:
              c = self._expand_user_properties(f.read())
          except IOError:
            self.log.warning('Error opening Spawner UI config file')

          try:
            if yaml.safe_load(c) is None:
              # YAML exists but is empty
              self._spawner_ui_config = {}
            else:
              # YAML exists and is not empty
              self._spawner_ui_config = yaml.safe_load(c)
          except yaml.YAMLError as e:
            self.log.warning(
                'Spawner UI config file contains'
                'invalid YAML syntax: {}', e)
            return None

        return self._spawner_ui_config

      extra_spawner_config = Dict({},
                                  config=True,
                                  help="""
            A dictionary with extra configuration parameters for KubeFormSpawner.
            """)

      def options_form(self, form):
        # Create Jinja environment to dynamically load templates
        j2_env = Environment(loader=FileSystemLoader('/etc/config'))

        # Get available PVCs in a given namespace
        # This is a blocking K8s API call
        existing_pvcs = self._list_pvcs_in_namespace(self.namespace)

        form_defaults = None
        if self.spawner_ui_config is not None:
          # YAML exists and was parsed successfully
          if self.spawner_ui_config['spawnerFormDefaults'] is not None:
            form_defaults = self.spawner_ui_config['spawnerFormDefaults']
          else:
            form_defaults = {}

        # Return the rendered template as a unicode string
        return j2_env.get_template('template.html').render(
            form_defaults=form_defaults,
            existing_pvcs=existing_pvcs,
            username=self._expand_user_properties('{username}'))

      def options_from_form(self, formdata):
        options = {}
        if self.spawner_ui_config is not None:
          form_defaults = self.spawner_ui_config['spawnerFormDefaults']

        # Manage Image
        image_readonly = False
        if self._default_config_contains('image'):
          options['image'] = form_defaults['image']['value']
          image_readonly = form_defaults['image'].get('readOnly', False)
        if ('image' in formdata and formdata['image'][0]):
          image_from_form = formdata['image'][0].strip()
          if image_readonly:
            # Provided image must be standard
            if image_from_form in form_defaults['image']['options']:
              options['image'] = image_from_form
          else:
            # Provided image can be standard or custom
            options['image'] = image_from_form

        # Manage CPU
        cpu_readonly = False
        if self._default_config_contains('cpu'):
          options['cpu'] = form_defaults['cpu']['value']
          cpu_readonly = form_defaults['cpu'].get('readOnly', False)
        if (not cpu_readonly and 'cpu' in formdata and formdata['cpu'][0]):
          options['cpu'] = formdata['cpu'][0].strip()

        # Manage Memory
        memory_readonly = False
        if self._default_config_contains('memory'):
          options['memory'] = form_defaults['memory']['value']
          memory_readonly = form_defaults['memory'].get('readOnly', False)
        if (not memory_readonly and 'memory' in formdata and formdata['memory'][0]):
          options['memory'] = formdata['memory'][0].strip()

        # Manage Workspace Volume
        options['workspaceVolume'] = {}
        ws_volume = {}

        ws_volume_readonly = False
        if self._default_config_contains('workspaceVolume'):
          ws_volume_readonly =           form_defaults['workspaceVolume'].get('readOnly', False)

          # The Workspace Volume is specified in `config.yaml`
          default_ws_volume = form_defaults['workspaceVolume']['value']

          # Get and set the default values from the YAML configuration file,
          # if present and not marked as readonly
          ws_type_readonly = False
          if ('type' in default_ws_volume and 'value' in default_ws_volume['type']):
            ws_volume['type'] = default_ws_volume['type']['value']
            ws_type_readonly =             default_ws_volume['type'].get('readOnly', False)

          ws_name_readonly = False
          if ('name' in default_ws_volume and 'value' in default_ws_volume['name']):
            ws_volume['name'] = default_ws_volume['name']['value']
            ws_name_readonly =             default_ws_volume['name'].get('readOnly', False)

          ws_size_readonly = False
          if ('size' in default_ws_volume and 'value' in default_ws_volume['size']):
            ws_volume['size'] =             '%sGi' % default_ws_volume['size']['value']
            ws_size_readonly =             default_ws_volume['size'].get('readOnly', False)

          ws_mount_path_readonly = False
          if ('mountPath' in default_ws_volume and
              'value' in default_ws_volume['mountPath']):
            ws_volume['mountPath'] =             default_ws_volume['mountPath']['value']
            ws_mount_path_readonly =             default_ws_volume['mountPath'].get('readOnly', False)

          ws_access_modes_readonly = False
          if ('accessModes' in default_ws_volume and
              'value' in default_ws_volume['accessModes']):
            ws_volume['accessModes'] =             default_ws_volume['accessModes']['value']
            ws_access_modes_readonly =             default_ws_volume['accessModes'].get('readOnly', False)

        # Get and set the Workspace Volume values from the form, if present
        # and not marked as readonly
        if not ws_volume_readonly:
          if (not ws_type_readonly and 'ws_type' in formdata and
              formdata['ws_type'][0]):
            ws_volume['type'] = formdata['ws_type'][0].strip()

          if (not ws_name_readonly and 'ws_name' in formdata and
              formdata['ws_name'][0]):
            ws_volume['name'] = formdata['ws_name'][0].strip()

          if (not ws_size_readonly and 'ws_size' in formdata and
              formdata['ws_size'][0]):
            ws_volume['size'] = '%sGi' % formdata['ws_size'][0].strip()

          if (not ws_mount_path_readonly and 'ws_mount_path' in formdata and
              formdata['ws_mount_path'][0]):
            ws_volume['mountPath'] =             formdata['ws_mount_path'][0].strip()

          if (not ws_access_modes_readonly and 'ws_access_modes' in formdata and
              formdata['ws_access_modes'][0]):
            ws_volume['accessModes'] =             formdata['ws_access_modes'][0].strip()

        options['workspaceVolume'] = ws_volume

        # Manage Data Volumes
        options['dataVolumes'] = []
        data_volumes_readonly = False
        if self._default_config_contains('dataVolumes'):
          data_volumes_readonly =           form_defaults['dataVolumes'].get('readOnly', False)

        if data_volumes_readonly:
          # Set Data Volumes as specified in the Spawner configuration file
          for volume in form_defaults['dataVolumes']['value']:
            data_volume = {}
            for f in ['type', 'name', 'size', 'mountPath', 'accessModes']:
              data_volume[f] = volume['value'][f]['value']
            data_volume['size'] += 'Gi'
            options['dataVolumes'].append(data_volume)
        else:
          # Deduce the total number of Data Volumes
          data_volumes_cnt = 0
          for k, v in formdata.items():
            if k.startswith('vol_type'):
              data_volumes_cnt += 1

          # Set Data Volumes as specified in the Spawner form
          for i in range(1, data_volumes_cnt + 1):
            data_volume = {}

            # Get all Data Volume fields from the form
            id = 'vol_type' + str(i)
            if id in formdata and formdata[id][0]:
              data_volume['type'] = formdata[id][0].strip()

            id = 'vol_name' + str(i)
            if id in formdata and formdata[id][0]:
              data_volume['name'] = formdata[id][0].strip()

            id = 'vol_size' + str(i)
            if id in formdata and formdata[id][0]:
              data_volume['size'] = '%sGi' % formdata[id][0].strip()

            id = 'vol_mount_path' + str(i)
            if id in formdata and formdata[id][0]:
              data_volume['mountPath'] = formdata[id][0].strip()

            id = 'vol_access_modes' + str(i)
            if id in formdata and formdata[id][0]:
              data_volume['accessModes'] = formdata[id][0].strip()

            options['dataVolumes'].append(data_volume)

        # Manage Extra Resources
        extra_resources_readonly = False
        if self._default_config_contains('extraResources'):
          options['extraResources'] = (form_defaults['extraResources']['value'])
          extra_resources_readonly =           form_defaults['extraResources'].get('readOnly', False)
        if (not extra_resources_readonly and 'extraResources' in formdata and
            formdata['extraResources'][0]):
          options['extraResources'] =           formdata['extraResources'][0].strip()

        return options

      @property
      def singleuser_image_spec(self):
        return self.user_options['image']

      image_spec = singleuser_image_spec

      @property
      def cpu_guarantee(self):
        return self.user_options['cpu']

      @property
      def mem_guarantee(self):
        return self.user_options['memory']

      @property
      def workspace_volume(self):
        return self.user_options["workspaceVolume"]

      @property
      def data_volumes(self):
        return self.user_options["dataVolumes"]

      @property
      def extra_resource_limits(self):
        extra = ''
        if self.user_options['extraResources']:
          extra = json.loads(self.user_options['extraResources'])
        return extra

      def get_env(self):
        env = super(KubeFormSpawner, self).get_env()
        gcp_secret_name = self.extra_spawner_config['gcp_secret_name']
        if gcp_secret_name:
          env['GOOGLE_APPLICATION_CREDENTIALS'] = '{}/{}.json'.format(
              SERVICE_ACCOUNT_SECRET_MOUNT, gcp_secret_name)
        return env

      # TODO(kkasravi): add unit test
      def _parse_user_name(self, username):
        safe_chars = set(string.ascii_lowercase + string.digits)
        name = username.split(':')[-1]
        legacy = ''.join([s if s in safe_chars else '-' for s in name.lower()])
        safe = escapism.escape(name, safe=safe_chars, escape_char='-').lower()
        return legacy, safe, name

      def _expand_user_properties(self, template):
        # Override KubeSpawner method to remove prefix accounts.google: for iap
        legacy, safe, name = self._parse_user_name(self.user.name)

        # Set servername based on whether named-server initialised
        if self.name:
          servername = '-{}'.format(self.name)
        else:
          servername = ''

        rname = template.format(
            userid=self.user.id,
            username=safe,
            unescaped_username=name,
            legacy_escape_username=legacy,
            servername=servername,
        )
        return rname

      def _default_config_contains(self, option):
        """Check if config.yaml contains a value for a Spawner option."""
        if self.spawner_ui_config is not None:
          form_defaults = None
          if 'spawnerFormDefaults' in self.spawner_ui_config:
            form_defaults = self.spawner_ui_config['spawnerFormDefaults']

          if form_defaults is not None and option in form_defaults:
            if 'value' in form_defaults[option]:
              return True
        return False

      def _get_pvc_manifest(self, name, storage_class, access_modes, storage,
                            labels, annotations):
        """
        Return a PVC spec based on the given parameters.
        This manifest will be used to create PVCs in the K8s cluster.
        """
        return make_pvc(
            name=name,
            storage_class=storage_class,
            access_modes=access_modes,
            storage=storage,
            labels=labels,
            annotations=annotations)

      def _list_pvcs_in_namespace(self, namespace):
        """
        Return a list with all non-failed PVCs in a K8s namespace.
        Each list entry is a dict with `name`, `size` and `access_modes` keys.
        """
        existing_pvcs = []

        try:
          resp = self.api.list_namespaced_persistent_volume_claim(
              namespace=namespace, watch=False)

        except ApiException as e:
          self.log.warn('Could not list PVCs in %s: %s', namespace, e)
          raise

        # Iterate over all existing PVCs and return all non-failed ones
        for pvc in [pvc for pvc in resp.items if pvc.status.phase != 'Failed']:
          existing_pvcs.append({
              "name":
              pvc.metadata.name,
              "size":
              pvc.spec.resources.requests.get('storage')[:-2],
              "access_modes":
              pvc.spec.access_modes
          })

        return existing_pvcs

      @gen.coroutine
      def _prepare_volumes(self):
        """Create PVC manifests and attach as volumes to the Notebook."""
        # Reset Volumes and VolumeMounts to initial KubeSpawner values
        self.volumes = list(self.initial_volumes)
        self.volume_mounts = list(self.initial_volume_mounts)

        # Workspace and Data Volumes are managed as PVCs
        persistent_volumes = [self.workspace_volume] + self.data_volumes

        for (idx, volume) in enumerate(persistent_volumes):
          if volume['type'] == 'New':
            yield self._provision_new_pvc(volume, self.namespace)
          elif volume['type'] == 'Existing':
            yield self._get_existing_pvc(volume['name'], self.namespace)

          # Upon success, mount PVC as a volume
          self.volumes.append({
              'name': 'volume-%d-{username}' % idx,
              'persistentVolumeClaim': {
                  'claimName': volume['name']
              }
          })

          self.volume_mounts.append({
              'mountPath': volume['mountPath'],
              'name': 'volume-%d-{username}' % idx
          })

      @gen.coroutine
      def _provision_new_pvc(self, volume, namespace):
        """Issue a K8s API request to create a new, namespaced PVC."""
        labels = self._build_common_labels(
            self._expand_all(self.user_storage_extra_labels))
        labels.update({'component': 'singleuser-storage'})
        annotations = self._build_common_annotations({})

        # Create a V1PersistentVolumeClaim for the API call
        pvc_manifest = self._get_pvc_manifest(
            name=volume['name'],
            storage_class=self.extra_spawner_config['storage_class'],
            access_modes=[volume['accessModes']],
            storage=volume['size'],
            labels=labels,
            annotations=annotations)

        pvc = None
        try:
          pvc = yield self.asynchronize(
              self.api.create_namespaced_persistent_volume_claim,
              namespace=namespace,
              body=pvc_manifest)

        except ApiException as e:
          if e.status == 409:
            self.log.warning('PVC %s already exists. New PVC not created.',
                             volume['name'])
          self.log.info(e.reason)
          raise

        self.log.info('PVC %s was successfully created', volume['name'])
        return pvc

      @gen.coroutine
      def _get_existing_pvc(self, pvc_name, namespace):
        """Issue a K8s API request to retrieve a namespaced PVC."""
        pvc = None

        try:
          pvc = yield self.asynchronize(
              self.api.read_namespaced_persistent_volume_claim,
              name=pvc_name,
              namespace=namespace)

        except ApiException as e:
          self.log.warning('PVC %s could not be retrieved: %s', pvc_name, e)
          raise

        self.log.info('PVC %s was successfully retrieved', pvc_name)
        return pvc

      @gen.coroutine
      def start(self):
        """Override KubeSpawner class start method."""
        yield self._prepare_volumes()
        _start = yield super(KubeFormSpawner, self).start()
        return _start
  spawner_ui_config.yaml: |
    # Configuration file for the default JupyterHub Spawner UI
    # Each key corresponds to a JupyterHub Spawner UI option
    # If a key is missing, the respective Spawner UI option will be left untouched
    #
    # Each Spawner UI option is configured by two keys: `value` and `readOnly`
    # - The `value` key contains the default value
    # - The `readOnly` key determines if the option will be available to users
    #
    # If the 'readOnly' key is present and set to 'true', the respective option
    # will be disabled for users and only set by the admin
    # If the 'readOnly' key is missing (defaults to 'false'), the respective option
    # will be available for users
    #
    # Please note that some values (e.g. {servername}, {username}) may be templated
    # and expanded according to KubeSpawner's rules
    #
    # For more information regarding JupyterHub KubeSpawner and its configuration:
    # https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html

    spawnerFormDefaults:
      image:
        # The container Image for the user's Jupyter Notebook
        # If readonly, this value must be a member of the list below
        value: gcr.io/kubeflow-images-public/tensorflow-1.13.1-notebook-cpu:v0.5.0
        # The list of available standard container Images
        options:
          - gcr.io/kubeflow-images-public/tensorflow-1.4.1-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.4.1-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.5.1-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.5.1-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.6.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.6.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.7.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.7.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.8.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.8.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.9.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.9.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.10.1-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.10.1-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.11.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.11.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.12.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.12.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.13.1-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.13.1-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-2.0.0a-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-2.0.0a-notebook-gpu:v0.5.0
        # By default, custom container Images are allowed
        # Uncomment the following line to only enable standard container Images
        #readOnly: true
      cpu:
        # CPU for user's Notebook
        value: '1.0'
      memory:
        # Memory for user's Notebook
        value: 1.0Gi
      workspaceVolume:
        # Workspace Volume to be attached to user's Notebook
        # Each Workspace Volume is declared with the following attributes:
        # Type, Name, Size, MountPath and Access Mode
        value:
          type:
            # The Type of the Workspace Volume
            # Supported values: 'New', 'Existing'
            value: New
          name:
            # The Name of the Workspace Volume
            # Note that this is a templated value
            value: {username}{servername}-workspace
          size:
            # The Size of the Workspace Volume (in Gi)
            value: '10'
          mountPath:
            # The Path that the Workspace Volume will be mounted
            readOnly: true
            value: /home/jovyan
          accessModes:
            # The Access Mode of the Workspace Volume
            # Supported values: 'ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'
            value: ReadWriteOnce
      dataVolumes:
        # List of additional Data Volumes to be attached to the user's Notebook
        value: []
        # Each Data Volume is declared with the following attributes:
        # Type, Name, Size, MountPath and Access Mode
        #
        # For example, a list with 2 Data Volumes:
        #value:
        #  - value:
        #      type:
        #        value: New
        #      name:
        #        value: {username}{servername}-vol-1
        #      size:
        #        value: '10'
        #      mountPath:
        #        value: /home/jovyan/{username}{servername}-vol-1
        #      accessModes:
        #        value: ReadWriteOnce
        #  - value:
        #      type:
        #        value: New
        #      name:
        #        value: {username}{servername}-vol-2
        #      size:
        #        value: '5'
        #      mountPath:
        #        value: /home/jovyan/{username}{servername}-vol-2
        #      accessModes:
        #        value: ReadWriteOnce
        #
        # Uncomment the following line to make the Data Volumes list readonly
        #readOnly: true
      extraResources:
        # Extra Resource Limits for user's Notebook
        # Note that braces are escaped
        value: "{{}}"
  style.css: |
    body {
        font-family:
          "Lato", -apple-system, BlinkMacSystemFont, "Avenir Next",
          "Avenir", "Segoe UI", "Lucida Grande", "Helvetica Neue", "Helvetica",
          "Fira Sans", "Roboto", "Noto", "Droid Sans", "Cantarell", "Oxygen",
          "Ubuntu", "Franklin Gothic Medium", "Century Gothic", "Liberation Sans",
          sans-serif;
    }

     b, strong {
        font-weight: 600;
    }

    .panel-primary>.panel-heading {
      padding-bottom: 4.5px;
    }

    .btn-jupyter[disabled] {
      background-color: #F37524;
      border-color: #E34F21;
    }

    .btn-success {
      color: #fff;
      background-color: #28a745;
      border-color: #28a745;
    }

    .btn-success:hover {
      color: #fff;
      background-color: #218838;
      border-color: #1e7e34;
    }

    .btn-success:active:focus {
      color: #fff;
      background-color: #28a745;
      border-color: #28a745;
    }

    .btn-success:focus {
      color: #fff;
      background-color: #28a745;
      border-color: #28a745;
    }

    input[readonly] {
      cursor: not-allowed;
    }

    select[readonly] {
      cursor: not-allowed;
    }

    .col-sm-3 {
      padding-left: 10px;
      padding-right: 10px;
    }
  template.html: |
    {% block css %}
      <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css">
      <style type="text/css">
        {% include "style.css" %}
      </style>
    {% endblock %}

    {% block javascript %}
      <script type="text/javascript">
        var existingPVCs = {{ existing_pvcs|tojson }};
        var formDefaults = {{ form_defaults|tojson }};
        var username = {{ username|tojson }};
        {% include "script.js" %}
      </script>
    {% endblock %}

    {% block existing_pvcs %}
      {% if form_defaults is not none %}
        <datalist id="suggest_pvcs">
          {% for pvc in existing_pvcs %}
            <option value="{{ pvc.name }}">
          {% endfor %}
        </datalist>
      {% endif %}
    {% endblock %}

    {% block error_message %}
      {% if form_defaults is none %}
        <div style="display: inline-block; text-align: left;padding: 10px;">
          <h3>The <code>config.yaml</code> file contains invalid YAML syntax</h3>
          <h4>Please follow the steps below to address this issue:</h4>
          <p class="help-block">
            1. Correct all YAML syntax errors in the <code>config.yaml</code> file<br>
            2. Ask your administrator to restart the JupyterHub server<br>
            3. Return at this page and log in to view the Spawner form
          </p>
        </div>
      {% endif %}
    {% endblock %}

    {% block header %}
      {% if form_defaults is not none %}
        <div class="panel-info">
          <div class="panel-heading">Fill out the form to customize your Jupyter Notebook.</div>
        </div>
      {% endif %}
    {% endblock %}

    {% block image %}
      {% if form_defaults is not none %}
        <!-- Image -->
        <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="fab fa-docker"></i>
            <label>Image</label>
          </div>
          <div class="panel-body" style="padding: 10px;">
            <div id='imageType' style="padding-bottom: 5px;">
              <label class="radio-inline">
                <input id="option_standard" type="radio" name="imageType" onclick="setImageType()"
                       value="standard" checked>Standard
              </label>
              <label class="radio-inline">
                <input id="option_custom" type="radio" name="imageType" onclick="setImageType()"
                       value="custom">Custom
              </label>
            </div>
            <select class="form-control" for="standardImages" required></select>
            <input class="form-control" for="customImage" placeholder="repo/image:tag" required>
          </div>
          <p class="text-muted" style="padding: 10px;">
            A starter Docker image for JupyterHub with a baseline deployment and typical ML packages.
          </p>
        </div>
        {% endif %}
    {% endblock %}

    {% block toggle_advanced_button %}
      {% if form_defaults is not none %}
        <!-- Advanced Options Toggle Button -->
        <div style="text-align: center; padding: 10px;">
          <a id="toggle_advanced_options" class="btn btn-primary">Toggle Advanced</a>
        </div>
      {% endif %}
    {% endblock %}

    {% block advanced_fields %}
      {% if form_defaults is not none %}
        <div id="advanced_fields" style="display: none;">
          {% block cpu %}
            <!-- CPU -->
            <div class="panel panel-primary">
              <div class="panel-heading">
                <i class="fas fa-microchip"></i>
                <label>CPU</label>
              </div>
              <div class="panel-body" style="padding: 10px;">
                <input class="form-control" id='cpu' name='cpu'
                       placeholder='200m, 2.5, etc' required>
                </input>
              </div>
              <p class="text-muted" style="padding: 10px;">
                For CPU-intensive workloads, you can choose more than 1 CPU
                (e.g. <span><code>1.5</code></span>).
              </p>
            </div>
          {% endblock %}

          {% block memory %}
            <!-- Memory -->
            <div class="panel panel-primary">
              <div class="panel-heading">
                <i class="fas fa-memory"></i>
                <label>Memory</label>
              </div>
              <div class="panel-body" style="padding: 10px;">
                <input class="form-control" id='memory' name='memory'
                       placeholder='100Mi, 1.5Gi, etc' required>
                </input>
              </div>
              <p class="text-muted" style="padding: 10px;">
                Specify the total amount of RAM reserved by your Notebook
                (e.g. <span><code>2.0Gi</code></span>).
              </p>
            </div>
          {% endblock %}

          {% block workspaceVolume %}
            <!-- Workspace Volume -->
            <div class="panel panel-primary">
              <div class="panel-heading">
                <i class="fas fa-laptop-code" style="padding: 0px 2px;"></i>
                <label>Workspace Volume</label>
              </div>
              <div class="panel-body" id="workspace_volume">
                  <div class="col-sm-2" style="width: 14%"><label>Type</label></div>
                  <div class="col-sm-3" style="width: 20%"><label>Name</label></div>
                  <div class="col-sm-2" style="width: 12%"><label>Size (Gi)</label></div>
                  <div class="col-sm-3" style="width: 29%"><label>Mount Path</label></div>
                  <div class="col-sm-3" style="width: 19%"><label>Access Mode</label></div>
                  <div class="col-sm-*">
                  <div class="col-sm-2" style="width: 14%">
                    <select class="form-control" name="ws_type" id="ws_type">
                      <option selected>New</option>
                      <option>Existing</option>
                    </select>
                  </div>
                  <div class="col-sm-3" style="width: 20%">
                    <input class="form-control" name="ws_name" id="ws_name"
                           list="suggest_pvcs_disabled" required>
                    </input>
                  </div>
                  <div class="col-sm-2" style="width: 12%">
                    <input class="form-control" name="ws_size" id="ws_size" placeholder='10'
                           type="number" step="0.5" min="0" required>
                    </input>
                  </div>
                  <div class="col-sm-3" style="width: 29%">
                    <input class="form-control" id="ws_mount_path" name="ws_mount_path" required></input>
                  </div>
                  <div class="col-sm-3" style="width: 19%">
                    <select class="form-control" id="ws_access_modes" name="ws_access_modes" required>
                      <option value="ReadWriteOnce">ReadWriteOnce</option>
                      <option value="ReadWriteMany">ReadWriteMany</option>
                      <option value="ReadOnlyMany">ReadOnlyMany</option>
                    </select>
                  </div>
                </div>
              </div>
              <p class="text-muted" style="padding: 10px;">
                Configure the Volume to be mounted as your personal Workspace.</br>
                For example, to create an empty Workspace:
                <span><code>New</code></span>
                <span><code>{{ username }}-workspace</code></span>,
                <span><code>10</code></span>,
                <span><code>/home/jovyan</code></span>,
                <span><code>ReadWriteOnce</code></span>
              </p>
            </div>
          {% endblock %}

          {% block dataVolumes %}
            <!-- Data Volumes -->
            <div class="panel panel-primary">
              <div class="panel-heading">
                <i class="far fa-hdd" style="padding: 0px 2px;"></i>
                <label>Data Volumes</label>
              </div>
              <div class="panel-body">
                <div class="col-sm-2" style="width: 14%"><label>Type</label></div>
                <div class="col-sm-3" style="width: 20%"><label>Name</label></div>
                <div class="col-sm-2" style="width: 12%"><label>Size (Gi)</label></div>
                <div class="col-sm-3" style="width: 29%"><label>Mount Path</label> </div>
                <div class="col-sm-3" style="width: 19%"><label>Access Mode</label></div>
                <div class="col-sm-*" id="data_volumes"></div>
                <div class="col-sm-2">
                  <button id="add_volume" class="btn btn-success btn-sm" type="button" onclick="addVolume();">
                    <i class="fas fa-plus"></i>
                  </button>
                </div>
              </div>
              <p class="text-muted" style="padding: 10px;">
                Configure the Volumes to be mounted as your Datasets.</br>
                For example, to create an empty Data Volume:
                <span><code>New</code></span>,
                <span><code>{{ username }}-volume-1</code></span>,
                <span><code>5</code></span>,
                <span><code>/home/jovyan/{{ username }}-volume-1</code></span>,
                <span><code>ReadWriteOnce</code></span>
              </p>
            </div>
          {% endblock %}

          {% block extra_resources %}
            <!-- Extra Resources -->
            <div class="panel panel-primary">
              <div class="panel-heading">
                <i class="fas fa-cogs"></i>
                <label>Extra Resources</label>
              </div>
              <div class="panel-body" style="padding: 10px;">
                {% raw %}
                <input class="form-control" id="extraResources" name='extraResources' placeholder='{"nvidia.com/gpu": 3}' required></input>
                {% endraw %}
              </div>
              <p class="text-muted" style="padding: 10px;">
                Reserve additional resources.</br>
                For example, to reserve 2 GPUs: <span><code>{"nvidia.com/gpu": 2}</code></span>
              </p>
            </div>
          {% endblock %}
        </div>
      {% endif %}
    {% endblock %}

    {% block footer %}
      {% if form_defaults is not none %}
        <div class="panel-warning">
          <div class="panel-heading">
            In case your Jupyter Notebook does not start, make sure that the resource quotas you specified are available in the cluster.
          </div>
        </div>
      {% endif %}
    {% endblock %}
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-config
  namespace: kubeflow
---
apiVersion: v1
data:
  spawner_ui_config.yaml: |
    # Configuration file for the default JupyterHub Spawner UI
    # Each key corresponds to a JupyterHub Spawner UI option
    # If a key is missing, the respective Spawner UI option will be left untouched
    #
    # Each Spawner UI option is configured by two keys: `value` and `readOnly`
    # - The `value` key contains the default value
    # - The `readOnly` key determines if the option will be available to users
    #
    # If the 'readOnly' key is present and set to 'true', the respective option
    # will be disabled for users and only set by the admin
    # If the 'readOnly' key is missing (defaults to 'false'), the respective option
    # will be available for users
    #
    # Please note that some values (e.g. {username}) may be templated
    # and expanded according to KubeSpawner's rules
    #
    # For more information regarding JupyterHub KubeSpawner and its configuration:
    # https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html

    spawnerFormDefaults:
      image:
        # The container Image for the user's Jupyter Notebook
        # If readonly, this value must be a member of the list below
        value: gcr.io/kubeflow-images-public/tensorflow-1.13.1-notebook-cpu:v0.5.0
        # The list of available standard container Images
        options:
          - gcr.io/kubeflow-images-public/tensorflow-1.5.1-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.5.1-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.6.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.6.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.7.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.7.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.8.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.8.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.9.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.9.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.10.1-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.10.1-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.11.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.11.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.12.0-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.12.0-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.13.1-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-1.13.1-notebook-gpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-2.0.0a-notebook-cpu:v0.5.0
          - gcr.io/kubeflow-images-public/tensorflow-2.0.0a-notebook-gpu:v0.5.0
        # By default, custom container Images are allowed
        # Uncomment the following line to only enable standard container Images
        readOnly: false
      cpu:
        # CPU for user's Notebook
        value: '0.5'
        # readOnly: true
      memory:
        # Memory for user's Notebook
        value: 1.0Gi
      workspaceVolume:
        # Workspace Volume to be attached to user's Notebook
        # Each Workspace Volume is declared with the following attributes:
        # Type, Name, Size, MountPath and Access Mode
        value:
          type:
            # The Type of the Workspace Volume
            # Supported values: 'New', 'Existing'
            value: New
          name:
            # The Name of the Workspace Volume
            # Note that this is a templated value
            # value: {username}-workspace
            value: {username}-workspace
          size:
            # The Size of the Workspace Volume (in Gi)
            value: '10'
          mountPath:
            # The Path that the Workspace Volume will be mounted
            readOnly: true
            value: /home/jovyan
          accessModes:
            # The Access Mode of the Workspace Volume
            # Supported values: 'ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'
            value: ReadWriteOnce
      dataVolumes:
        # List of additional Data Volumes to be attached to the user's Notebook
        value: []
        # Each Data Volume is declared with the following attributes:
        # Type, Name, Size, MountPath and Access Mode
        #
        # For example, a list with 2 Data Volumes:
        #value:
        #  - value:
        #      type:
        #        value: New
        #      name:
        #        value: {username}-vol-1
        #      size:
        #        value: '10'
        #      mountPath:
        #        value: /home/jovyan/{username}-vol-1
        #      accessModes:
        #        value: ReadWriteOnce
        #  - value:
        #      type:
        #        value: New
        #      name:
        #        value: {username}-vol-2
        #      size:
        #        value: '5'
        #      mountPath:
        #        value: /home/jovyan/{username}-vol-2
        #      accessModes:
        #        value: ReadWriteOnce
        #
        # Uncomment the following line to make the Data Volumes list readonly
        #readOnly: true
      extraResources:
        # Extra Resource Limits for user's Notebook
        # Note that braces are escaped
        value: "{{}}"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-web-app-config
  namespace: kubeflow
---
apiVersion: v1
data:
  sync-application.jsonnet: |
    //
    // This function will track expected children with created children (request.children)
    // and report status information
    //
    function(request) {
      local util = import "util.libsonnet",
      local extendedInfo = util.toBool(false),
      local children = [
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp",
            "service": "ambassador"
          },
          "name": "ambassador",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp",
            "service": "ambassador-admin"
          },
          "name": "ambassador-admin",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ambassador",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ambassador",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-config",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "jupyter",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-0",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta1",
        "kind": "StatefulSet",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-role",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-notebook-role",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "jupyter-lb",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-lb",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "jupyter",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-notebook",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-role",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-notebook-role",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "notebooks-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "notebook-controller",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "notebook-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "notebooks-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp",
            "run": "jupyter-web-app"
          },
          "name": "jupyter-web-app",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "jupyter-web-app",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-web-app",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-web-app-config",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "jupyter-web-app",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-web-app",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-notebook",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-notebook-role",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "jupyter-notebook-role-binding",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "profiles",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "profiles",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "profiles",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "profiles",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "profiles",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "profiles",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "centraldashboard",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "centraldashboard",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app": "centraldashboard",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app": "centraldashboard",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "centraldashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "tf-job-operator",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "tf-job-operator-config",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "tf-job-operator",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "tf-job-operator",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "tf-job-dashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "tf-job-dashboard",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "tf-job-dashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "tf-job-dashboard",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "pytorch-operator-config",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "pytorch-operator",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "pytorch-operator",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "pytorch-operator",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "spartakus",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "spartakus",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "spartakus",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "spartakus-volunteer",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "workflow-controller",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "workflow-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "argo-ui",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "argo-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "argo-ui",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "argo-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "workflow-controller-configmap",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "argo",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "argo-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "minio-service",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "minio",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Secret",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "mlpipeline-minio-artifact",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "mysql",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "mysql",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app": "ml-pipeline",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app": "ml-pipeline",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "ml-pipeline",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "pipeline-runner",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-scheduledworkflow",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-scheduledworkflow",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-scheduledworkflow",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-scheduledworkflow",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-scheduledworkflow",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-persistenceagent",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-persistenceagent",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-persistenceagent",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-viewer-crd-service-account",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-viewer-crd",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-viewer-controller-deployment",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-ui",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-tensorboard-ui",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-tensorboard-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "RoleBinding",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-ui",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "rbac.authorization.k8s.io/v1beta1",
        "kind": "Role",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-ui",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1beta2",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "ml-pipeline-ui",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "ml-pipeline-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "PersistentVolumeClaim",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "mysql-pv-claim",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "PersistentVolumeClaim",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "minio-pvc",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app": "alb-ingress-controller",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "alb-ingress-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "alb-ingress-controller",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "alb-ingress-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "networking.istio.io/v1alpha3",
        "kind": "Gateway",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "kubeflow-gateway",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "networking.istio.io/v1alpha3",
        "kind": "VirtualService",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "kubeflow-routes",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Ingress",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "istio-ingress",
          "namespace": "istio-system"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "core"
          },
          "name": "vizier-core",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "core"
          },
          "name": "vizier-core",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "db"
          },
          "name": "vizier-db",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "PersistentVolumeClaim",
        "metadata": {
          "labels": {
            "app": "katib",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "katib-mysql",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "db"
          },
          "name": "vizier-db",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Secret",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "vizier-db-secrets",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "vizier-core",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "core-rest"
          },
          "name": "vizier-core-rest",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "core-rest"
          },
          "name": "vizier-core-rest",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "ui"
          },
          "name": "katib-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "ui"
          },
          "name": "katib-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "katib-ui",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "suggestion-random"
          },
          "name": "vizier-suggestion-random",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "suggestion-random"
          },
          "name": "vizier-suggestion-random",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "suggestion-grid"
          },
          "name": "vizier-suggestion-grid",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "suggestion-grid"
          },
          "name": "vizier-suggestion-grid",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "suggestion-hyperband"
          },
          "name": "vizier-suggestion-hyperband",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "suggestion-hyperband"
          },
          "name": "vizier-suggestion-hyperband",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "suggestion-bayesianoptimization"
          },
          "name": "vizier-suggestion-bayesianoptimization",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "vizier",
            "app.kubernetes.io/name": "kfapp",
            "component": "suggestion-bayesianoptimization"
          },
          "name": "vizier-suggestion-bayesianoptimization",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "metrics-collector",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "metricscollector-template",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ServiceAccount",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "studyjob-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "extensions/v1beta1",
        "kind": "Deployment",
        "metadata": {
          "labels": {
            "app": "studyjob-controller",
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "studyjob-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "studyjob-controller",
          "namespace": "kubeflow"
        }
      },
      {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
          "labels": {
            "app.kubernetes.io/name": "kfapp"
          },
          "name": "worker-template",
          "namespace": "kubeflow"
        }
      }
    ],
      local groupedResources = {
      "ConfigMap": {
        "jupyter-config": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-config",
            "namespace": "kubeflow"
          }
        },
        "jupyter-web-app-config": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-web-app-config",
            "namespace": "kubeflow"
          }
        },
        "metricscollector-template": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "metricscollector-template",
            "namespace": "kubeflow"
          }
        },
        "pytorch-operator-config": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "pytorch-operator-config",
            "namespace": "kubeflow"
          }
        },
        "tf-job-operator-config": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "tf-job-operator-config",
            "namespace": "kubeflow"
          }
        },
        "worker-template": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "worker-template",
            "namespace": "kubeflow"
          }
        },
        "workflow-controller-configmap": {
          "apiVersion": "v1",
          "kind": "ConfigMap",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "workflow-controller-configmap",
            "namespace": "kubeflow"
          }
        }
      },
      "Deployment": {
        "alb-ingress-controller": {
          "apiVersion": "apps/v1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "alb-ingress-controller",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "alb-ingress-controller",
            "namespace": "kubeflow"
          }
        },
        "ambassador": {
          "apiVersion": "apps/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ambassador",
            "namespace": "kubeflow"
          }
        },
        "argo-ui": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "argo-ui",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "argo-ui",
            "namespace": "kubeflow"
          }
        },
        "centraldashboard": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "centraldashboard",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "jupyter-web-app": {
          "apiVersion": "apps/v1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "jupyter-web-app",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-web-app",
            "namespace": "kubeflow"
          }
        },
        "katib-ui": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "ui"
            },
            "name": "katib-ui",
            "namespace": "kubeflow"
          }
        },
        "minio": {
          "apiVersion": "apps/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "minio",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-persistenceagent": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-persistenceagent",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-persistenceagent",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-scheduledworkflow": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-scheduledworkflow",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-scheduledworkflow",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-ui",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-viewer-controller-deployment": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-viewer-crd",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-viewer-controller-deployment",
            "namespace": "kubeflow"
          }
        },
        "mysql": {
          "apiVersion": "apps/v1beta2",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "mysql",
            "namespace": "kubeflow"
          }
        },
        "notebooks-controller": {
          "apiVersion": "apps/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "notebooks-controller",
            "namespace": "kubeflow"
          }
        },
        "profiles": {
          "apiVersion": "apps/v1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "profiles",
            "namespace": "kubeflow"
          }
        },
        "pytorch-operator": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "pytorch-operator",
            "namespace": "kubeflow"
          }
        },
        "spartakus-volunteer": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "spartakus",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "spartakus-volunteer",
            "namespace": "kubeflow"
          }
        },
        "studyjob-controller": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "studyjob-controller",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "studyjob-controller",
            "namespace": "kubeflow"
          }
        },
        "tf-job-dashboard": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "tf-job-dashboard",
            "namespace": "kubeflow"
          }
        },
        "tf-job-operator": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "tf-job-operator",
            "namespace": "kubeflow"
          }
        },
        "vizier-core": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "core"
            },
            "name": "vizier-core",
            "namespace": "kubeflow"
          }
        },
        "vizier-core-rest": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "core-rest"
            },
            "name": "vizier-core-rest",
            "namespace": "kubeflow"
          }
        },
        "vizier-db": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "db"
            },
            "name": "vizier-db",
            "namespace": "kubeflow"
          }
        },
        "vizier-suggestion-bayesianoptimization": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "suggestion-bayesianoptimization"
            },
            "name": "vizier-suggestion-bayesianoptimization",
            "namespace": "kubeflow"
          }
        },
        "vizier-suggestion-grid": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "suggestion-grid"
            },
            "name": "vizier-suggestion-grid",
            "namespace": "kubeflow"
          }
        },
        "vizier-suggestion-hyperband": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "suggestion-hyperband"
            },
            "name": "vizier-suggestion-hyperband",
            "namespace": "kubeflow"
          }
        },
        "vizier-suggestion-random": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "suggestion-random"
            },
            "name": "vizier-suggestion-random",
            "namespace": "kubeflow"
          }
        },
        "workflow-controller": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Deployment",
          "metadata": {
            "labels": {
              "app": "workflow-controller",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "workflow-controller",
            "namespace": "kubeflow"
          }
        }
      },
      "Gateway": {
        "kubeflow-gateway": {
          "apiVersion": "networking.istio.io/v1alpha3",
          "kind": "Gateway",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "kubeflow-gateway",
            "namespace": "kubeflow"
          }
        }
      },
      "Ingress": {
        "istio-ingress": {
          "apiVersion": "extensions/v1beta1",
          "kind": "Ingress",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "istio-ingress",
            "namespace": "istio-system"
          }
        }
      },
      "PersistentVolumeClaim": {
        "katib-mysql": {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "labels": {
              "app": "katib",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "katib-mysql",
            "namespace": "kubeflow"
          }
        },
        "minio-pvc": {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "minio-pvc",
            "namespace": "kubeflow"
          }
        },
        "mysql-pv-claim": {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "mysql-pv-claim",
            "namespace": "kubeflow"
          }
        }
      },
      "Role": {
        "centraldashboard": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app": "centraldashboard",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "jupyter-notebook-role": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-notebook-role",
            "namespace": "kubeflow"
          }
        },
        "jupyter-role": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-role",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app": "ml-pipeline",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-scheduledworkflow": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-scheduledworkflow",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-scheduledworkflow",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-ui",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        },
        "profiles": {
          "apiVersion": "rbac.authorization.k8s.io/v1",
          "kind": "Role",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "profiles",
            "namespace": "kubeflow"
          }
        }
      },
      "RoleBinding": {
        "centraldashboard": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app": "centraldashboard",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "jupyter-notebook-role": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-notebook-role",
            "namespace": "kubeflow"
          }
        },
        "jupyter-notebook-role-binding": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-notebook-role-binding",
            "namespace": "kubeflow"
          }
        },
        "jupyter-role": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-role",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app": "ml-pipeline",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "rbac.authorization.k8s.io/v1beta1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-ui",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        },
        "profiles": {
          "apiVersion": "rbac.authorization.k8s.io/v1",
          "kind": "RoleBinding",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "profiles",
            "namespace": "kubeflow"
          }
        }
      },
      "Secret": {
        "mlpipeline-minio-artifact": {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "mlpipeline-minio-artifact",
            "namespace": "kubeflow"
          }
        },
        "vizier-db-secrets": {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "vizier-db-secrets",
            "namespace": "kubeflow"
          }
        }
      },
      "Service": {
        "ambassador": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp",
              "service": "ambassador"
            },
            "name": "ambassador",
            "namespace": "kubeflow"
          }
        },
        "ambassador-admin": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp",
              "service": "ambassador-admin"
            },
            "name": "ambassador-admin",
            "namespace": "kubeflow"
          }
        },
        "argo-ui": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "argo-ui",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "argo-ui",
            "namespace": "kubeflow"
          }
        },
        "centraldashboard": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "centraldashboard",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "jupyter-0": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "jupyter",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-0",
            "namespace": "kubeflow"
          }
        },
        "jupyter-lb": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "jupyter-lb",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-lb",
            "namespace": "kubeflow"
          }
        },
        "jupyter-web-app": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp",
              "run": "jupyter-web-app"
            },
            "name": "jupyter-web-app",
            "namespace": "kubeflow"
          }
        },
        "katib-ui": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "ui"
            },
            "name": "katib-ui",
            "namespace": "kubeflow"
          }
        },
        "minio-service": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "minio-service",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "ml-pipeline",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-tensorboard-ui": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-tensorboard-ui",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-tensorboard-ui",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "ml-pipeline-ui",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        },
        "mysql": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "mysql",
            "namespace": "kubeflow"
          }
        },
        "notebooks-controller": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "notebooks-controller",
            "namespace": "kubeflow"
          }
        },
        "profiles": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "profiles",
            "namespace": "kubeflow"
          }
        },
        "studyjob-controller": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "studyjob-controller",
            "namespace": "kubeflow"
          }
        },
        "tf-job-dashboard": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "tf-job-dashboard",
            "namespace": "kubeflow"
          }
        },
        "vizier-core": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "core"
            },
            "name": "vizier-core",
            "namespace": "kubeflow"
          }
        },
        "vizier-core-rest": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "core-rest"
            },
            "name": "vizier-core-rest",
            "namespace": "kubeflow"
          }
        },
        "vizier-db": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "db"
            },
            "name": "vizier-db",
            "namespace": "kubeflow"
          }
        },
        "vizier-suggestion-bayesianoptimization": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "suggestion-bayesianoptimization"
            },
            "name": "vizier-suggestion-bayesianoptimization",
            "namespace": "kubeflow"
          }
        },
        "vizier-suggestion-grid": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "suggestion-grid"
            },
            "name": "vizier-suggestion-grid",
            "namespace": "kubeflow"
          }
        },
        "vizier-suggestion-hyperband": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "suggestion-hyperband"
            },
            "name": "vizier-suggestion-hyperband",
            "namespace": "kubeflow"
          }
        },
        "vizier-suggestion-random": {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "app": "vizier",
              "app.kubernetes.io/name": "kfapp",
              "component": "suggestion-random"
            },
            "name": "vizier-suggestion-random",
            "namespace": "kubeflow"
          }
        }
      },
      "ServiceAccount": {
        "alb-ingress-controller": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "alb-ingress-controller",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "alb-ingress-controller",
            "namespace": "kubeflow"
          }
        },
        "ambassador": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ambassador",
            "namespace": "kubeflow"
          }
        },
        "argo": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "argo",
            "namespace": "kubeflow"
          }
        },
        "argo-ui": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "argo-ui",
            "namespace": "kubeflow"
          }
        },
        "centraldashboard": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "centraldashboard",
            "namespace": "kubeflow"
          }
        },
        "jupyter": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "jupyter",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter",
            "namespace": "kubeflow"
          }
        },
        "jupyter-notebook": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-notebook",
            "namespace": "kubeflow"
          }
        },
        "jupyter-web-app": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "jupyter-web-app",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter-web-app",
            "namespace": "kubeflow"
          }
        },
        "katib-ui": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "katib-ui",
            "namespace": "kubeflow"
          }
        },
        "metrics-collector": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "metrics-collector",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-persistenceagent": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-persistenceagent",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-scheduledworkflow": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-scheduledworkflow",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-ui": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-ui",
            "namespace": "kubeflow"
          }
        },
        "ml-pipeline-viewer-crd-service-account": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "ml-pipeline-viewer-crd-service-account",
            "namespace": "kubeflow"
          }
        },
        "notebook-controller": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "notebook-controller",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "notebook-controller",
            "namespace": "kubeflow"
          }
        },
        "pipeline-runner": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "pipeline-runner",
            "namespace": "kubeflow"
          }
        },
        "profiles": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "profiles",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "profiles",
            "namespace": "kubeflow"
          }
        },
        "pytorch-operator": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "pytorch-operator",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "pytorch-operator",
            "namespace": "kubeflow"
          }
        },
        "spartakus": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "spartakus",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "spartakus",
            "namespace": "kubeflow"
          }
        },
        "studyjob-controller": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "studyjob-controller",
            "namespace": "kubeflow"
          }
        },
        "tf-job-dashboard": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "tf-job-dashboard",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "tf-job-dashboard",
            "namespace": "kubeflow"
          }
        },
        "tf-job-operator": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app": "tf-job-operator",
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "tf-job-operator",
            "namespace": "kubeflow"
          }
        },
        "vizier-core": {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "vizier-core",
            "namespace": "kubeflow"
          }
        }
      },
      "StatefulSet": {
        "jupyter": {
          "apiVersion": "apps/v1beta1",
          "kind": "StatefulSet",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "jupyter",
            "namespace": "kubeflow"
          }
        }
      },
      "VirtualService": {
        "kubeflow-routes": {
          "apiVersion": "networking.istio.io/v1alpha3",
          "kind": "VirtualService",
          "metadata": {
            "labels": {
              "app.kubernetes.io/name": "kfapp"
            },
            "name": "kubeflow-routes",
            "namespace": "kubeflow"
          }
        }
      }
    },
      local expectedChildren = util.sort(std.filter(util.validateResource, children), util.comparator),
      local createdChildren =
        std.flattenArrays(std.map(util.extractResources, util.extractGroups(request.children))),
      local groupedCreatedChildren = util.groupByResource(createdChildren),
      local foundChildren = std.filterMap(util.curryResources(groupedResources, true),
          util.getApiVersionKindAndMetadata, createdChildren),
      local missingChildren = std.filter(util.curryResources(groupedCreatedChildren, false), expectedChildren),
      local assemblyPhase = {
        return::
          if std.length(foundChildren) >= std.length(expectedChildren) then
            "Succeeded"
          else
            "Pending",
      }.return,
      local info(resource) = {
        return::
          util.lower(resource.kind) + "s." + resource.apiVersion + "/" + resource.metadata.name,
      }.return,
      local emitExtendedInfo = {
        return::
          if extendedInfo == true then {
            expected: std.sort(std.map(info, expectedChildren)),
            created: std.sort(std.map(info, createdChildren)),
            found: std.sort(std.map(info, foundChildren)),
            missing: std.sort(std.map(info, missingChildren)),
            counts: {
              created_children: std.length(createdChildren),
              expected_children: std.length(expectedChildren),
              found_children: std.length(foundChildren),
              missing_children: std.length(missingChildren),
            },
          },
      }.return,
      children: foundChildren,
      status: {
        assemblyPhase: assemblyPhase,
        ready: "True",
        created: true,
        info: emitExtendedInfo,
      },
    }
  util.libsonnet: |
    // Some useful routines.
    {
      local k = import "k.libsonnet",
      local util = self,

      // Convert a string to lower case.
      lower:: function(x) {
        local cp(c) = std.codepoint(c),
        local lowerLetter(c) = if cp(c) >= 65 && cp(c) < 91 then
          std.char(cp(c) + 32)
        else c,
        result:: std.join("", std.map(lowerLetter, std.stringChars(x))),
      }.result,

      // Convert non-boolean types like string,number to a boolean.
      // This is primarily intended for dealing with parameters that should be booleans.
      toBool:: function(x) {
        result::
          if std.type(x) == "boolean" then
            x
          else if std.type(x) == "string" then
            std.asciiUpper(x) == "TRUE"
          else if std.type(x) == "number" then
            x != 0
          else
            false,
      }.result,

      // Convert a comma-delimited string to an Array
      toArray:: function(str) {
        local trim(str) = {
          rest::
            if std.startsWith(str, " ") then
              std.substr(str, 1, std.length(str) - 1)
            else
              str,
        }.rest,
        result::
          if std.type(str) == "string" && str != "null" && std.length(str) > 0 then
            std.map(trim, std.split(str, ","))
          else [],
      }.result,

      foldl:: function(key, value, objs) {
        local aux(arr, i, running) =
          if i >= std.length(arr) then
            running
          else
            aux(arr, i + 1, running { [key(arr[i])]+: value(arr[i]) }) tailstrict,
        return:: aux(objs, 0, {},),
      }.return,

      sort:: function(arr, compare=function(a, b) {
        return::
          if a == b then
            0
          else
            if a < b then
              -1
            else
              1,
      }.return) {
        local _sort(arr, compare) = {
          local l = std.length(arr),
          local f = {
            local pivot = arr[0],
            local rest = std.makeArray(l - 1, function(i) arr[i + 1]),
            local lessorequal(x) = compare(x, pivot) <= 0,
            local greater(x) = compare(x, pivot) > 0,
            local left = _sort(std.filter(lessorequal, rest), compare) tailstrict,
            local right = _sort(std.filter(greater, rest), compare) tailstrict,
            return:: left + [pivot] + right,
          }.return,
          return::
            if l == 0 then
              []
            else
              f,
        }.return,
        return:: _sort(arr, compare),
      }.return,

      setDiff:: function(a, b, compare=function(a, b) {
        return::
          if a == b then
            0
          else if a < b then
            -1
          else
            1,
      }.return) {
        local aux(a, b, i, j, acc) =
          if i >= std.length(a) then
            acc
          else
            if j >= std.length(b) then
              aux(a, b, i + 1, j, acc + [a[i]]) tailstrict
            else
              if compare(a[i], b[j]) == 0 then
                aux(a, b, i + 1, j + 1, acc) tailstrict
              else
                if compare(a[i], b[j]) == -1 then
                  aux(a, b, i + 1, j, acc + [a[i]]) tailstrict
                else
                  aux(a, b, i, j + 1, acc) tailstrict,
        return:: aux(a, b, 0, 0, []) tailstrict,
      }.return,

      getApiVersionKindAndMetadata(resource):: {
        return::
          if std.objectHas(resource.metadata, "resourceVersion") then {
            apiVersion: resource.apiVersion,
            kind: resource.kind,
            metadata: {
              labels: resource.metadata.labels,
              name: resource.metadata.name,
              namespace: resource.metadata.namespace,
              resourceVersion: resource.metadata.resourceVersion,
            }
          } else {
            apiVersion: resource.apiVersion,
            kind: resource.kind,
            metadata: {
              labels: resource.metadata.labels,
              name: resource.metadata.name,
              namespace: resource.metadata.namespace,
            },
          },
      }.return,

      groupByResource(resources):: {
        local getKey(resource) = {
          return::
            resource.kind,
        }.return,
        local getValue(resource) = {
          return::
            { [resource.metadata.name]+: resource },
        }.return,
        return:: util.foldl(getKey, getValue, resources),
      }.return,

      comparator(a, b):: {
        return::
          if a.metadata.name == b.metadata.name then
            0
          else
            if a.metadata.name < b.metadata.name then
              -1
            else
              1,
      }.return,

      validateResource(resource):: {
        return::
          if std.type(resource) == "object" &&
             std.objectHas(resource, "kind") &&
             std.objectHas(resource, "apiVersion") &&
             std.objectHas(resource, "metadata") &&
             std.objectHas(resource.metadata, "name") then
            true
          else
            false,
      }.return,

      extractGroups(obj)::
        if std.type(obj) == "object" then
          [obj[key] for key in std.objectFields(obj)]
        else
          [],

      extractResources(group)::
        if std.type(group) == "object" then
          [group[key] for key in std.objectFields(group)]
        else
          [],

      curryResources(resources, exists):: {
        local existingResource(resource) = {
          local resourceExists(kind, name) = {
            return::
              if std.objectHas(resources, kind) &&
                 std.objectHas(resources[kind], name) then
                true
              else
                false,
          }.return,
          return::
            if util.validateResource(resource) then
              resourceExists(resource.kind, resource.metadata.name)
            else
              false,
        }.return,
        local missingResource(resource) = {
          return::
            existingResource(resource) == false,
        }.return,
        return::
          if exists == true then
            existingResource
          else
            missingResource,
      }.return,

      // Produce a list of manifests. obj must be an array
      list(obj):: k.core.v1.list.new(obj,),
    }
kind: ConfigMap
metadata:
  labels:
    ksonnet.io/component: application
  name: kfapp-controller-hooks
  namespace: kubeflow
---
apiVersion: v1
data:
  defaultMetricsCollectorTemplate.yaml: |
    apiVersion: batch/v1beta1
    kind: CronJob
    metadata:
      name: {{.WorkerID}}
      namespace: {{.NameSpace}}
    spec:
      schedule: "*/1 * * * *"
      successfulJobsHistoryLimit: 0
      failedJobsHistoryLimit: 1
      jobTemplate:
        spec:
          backoffLimit: 0
          template:
            spec:
              serviceAccountName: metrics-collector
              containers:
              - name: {{.WorkerID}}
                image: gcr.io/kubeflow-images-public/katib/metrics-collector:v0.1.2-alpha-156-g4ab3dbd
                args:
                - "./metricscollector"
                - "-s"
                - "{{.StudyID}}"
                - "-t"
                - "{{.TrialID}}"
                - "-w"
                - "{{.WorkerID}}"
                - "-k"
                - "{{.WorkerKind}}"
                - "-n"
                - "{{.NameSpace}}"
                - "-m"
                - "{{.ManagerSerivce}}"
              restartPolicy: Never
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: metricscollector-template
  namespace: kubeflow
---
apiVersion: v1
data:
  controller_config_file.yaml: |-
    {

    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pytorch-operator-config
  namespace: kubeflow
---
apiVersion: v1
data:
  controller_config_file.yaml: |-
    {
        "grpcServerFilePath": "/opt/mlkube/grpc_tensorflow_server/grpc_tensorflow_server.py"
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-operator-config
  namespace: kubeflow
---
apiVersion: v1
data:
  cpuWorkerTemplate.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{.WorkerID}}
      namespace: kubeflow
    spec:
      template:
        spec:
          containers:
          - name: {{.WorkerID}}
            image: katib/mxnet-mnist-example
            command:
            - "python"
            - "/mxnet/example/image-classification/train_mnist.py"
            - "--batch-size=64"
            {{- with .HyperParameters}}
            {{- range .}}
            - "{{.Name}}={{.Value}}"
            {{- end}}
            {{- end}}
          restartPolicy: Never
  defaultWorkerTemplate.yaml: |
    apiVersion: batch/v1
    namespace: kubeflow
    kind: Job
    metadata:
      name: {{.WorkerID}}
    spec:
      template:
        spec:
          containers:
          - name: {{.WorkerID}}
            image: alpine
          restartPolicy: Never
  gpuWorkerTemplate.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: {{.WorkerID}}
      namespace: kubeflow
    spec:
      template:
        spec:
          containers:
          - name: {{.WorkerID}}
            image: katib/mxnet-mnist-example:gpu
            command:
            - "python"
            - "/mxnet/example/image-classification/train_mnist.py"
            - "--batch-size=64"
            {{- with .HyperParameters}}
            {{- range .}}
            - "{{.Name}}={{.Value}}"
            {{- end}}
            {{- end}}
            resources:
              limits:
                nvidia.com/gpu: 1
          restartPolicy: Never
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: worker-template
  namespace: kubeflow
---
apiVersion: v1
data:
  config: |
    {
    executorImage: argoproj/argoexec:v2.2.0,
    artifactRepository:
    {
        s3: {
            bucket: mlpipeline,
            keyPrefix: artifacts,
            endpoint: minio-service.kubeflow:9000,
            insecure: true,
            accessKeySecret: {
                name: mlpipeline-minio-artifact,
                key: accesskey
            },
            secretKeySecret: {
                name: mlpipeline-minio-artifact,
                key: secretkey
            }
        }
    }
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: workflow-controller-configmap
  namespace: kubeflow
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: katib
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: katib-mysql
  namespace: kubeflow
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: minio-pvc
  namespace: kubeflow
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: mysql-pv-claim
  namespace: kubeflow
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: alb-ingress-controller
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: alb-ingress-controller
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ambassador
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: argo
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: argo-ui
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: centraldashboard
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: jupyter
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-notebook
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-notebook
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: jupyter-web-app
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-web-app
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: katib-ui
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    ksonnet.io/component: metacontroller
  name: meta-controller-service
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: metrics-collector
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-persistenceagent
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-scheduledworkflow
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-ui
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-viewer-crd-service-account
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: notebook-controller
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: notebook-controller
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pipeline-runner
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: profiles
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: profiles
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: pytorch-operator
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pytorch-operator
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: spartakus
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: spartakus
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: studyjob-controller
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: tf-job-dashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-dashboard
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: tf-job-operator
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-operator
  namespace: kubeflow
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: vizier-core
  namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: profiles
  namespace: kubeflow
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - '*'
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - roles
      - rolebindings
    verbs:
      - '*'
  - apiGroups:
      - kubeflow.org
    resources:
      - profiles
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: centraldashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: centraldashboard
  namespace: kubeflow
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/exec
      - pods/log
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-notebook-role
  namespace: kubeflow
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - secrets
      - services
    verbs:
      - '*'
  - apiGroups:
      - ""
      - apps
      - extensions
    resources:
      - deployments
      - replicasets
    verbs:
      - '*'
  - apiGroups:
      - kubeflow.org
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-notebook-role
  namespace: kubeflow
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - secrets
      - services
    verbs:
      - '*'
  - apiGroups:
      - ""
      - apps
      - extensions
    resources:
      - deployments
      - replicasets
    verbs:
      - '*'
  - apiGroups:
      - kubeflow.org
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - batch
    resources:
      - jobs
    verbs:
      - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-role
  namespace: kubeflow
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - persistentvolumeclaims
    verbs:
      - get
      - watch
      - list
      - create
      - delete
  - apiGroups:
      - ""
    resources:
      - events
      - secrets
    verbs:
      - get
      - watch
      - list
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: ml-pipeline
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline
  namespace: kubeflow
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - kubeflow.org
    resources:
      - scheduledworkflows
    verbs:
      - create
      - get
      - list
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: ml-pipeline-scheduledworkflow
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-scheduledworkflow
  namespace: kubeflow
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflows
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
  - apiGroups:
      - kubeflow.org
    resources:
      - scheduledworkflows
    verbs:
      - create
      - get
      - list
      - watch
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: ml-pipeline-ui
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-ui
  namespace: kubeflow
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
    verbs:
      - create
      - get
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: profiles
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: profiles
subjects:
  - kind: ServiceAccount
    name: profiles
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: centraldashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: centraldashboard
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: centraldashboard
subjects:
  - kind: ServiceAccount
    name: centraldashboard
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-notebook-role
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jupyter-notebook-role
subjects:
  - kind: ServiceAccount
    name: jupyter-notebook
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-notebook-role-binding
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jupyter-notebook-role
subjects:
  - kind: ServiceAccount
    name: jupyter-notebook
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-role
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jupyter-role
subjects:
  - kind: ServiceAccount
    name: jupyter
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: ml-pipeline
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ml-pipeline
subjects:
  - kind: ServiceAccount
    name: ml-pipeline
    namespace: kubeflow
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: ml-pipeline-ui
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-ui
  namespace: kubeflow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ml-pipeline-ui
subjects:
  - kind: ServiceAccount
    name: ml-pipeline-ui
    namespace: kubeflow
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
    service: ambassador
  name: ambassador
  namespace: kubeflow
spec:
  ports:
    - name: ambassador
      port: 80
      targetPort: 80
  selector:
    service: ambassador
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
    service: ambassador-admin
  name: ambassador-admin
  namespace: kubeflow
spec:
  ports:
    - name: ambassador-admin
      port: 8877
      targetPort: 8877
  selector:
    service: ambassador
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: argo-ui-mapping
      prefix: /argo/
      service: argo-ui.kubeflow
  labels:
    app: argo-ui
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: argo-ui
  namespace: kubeflow
spec:
  ports:
    - port: 80
      targetPort: 8001
  selector:
    app: argo-ui
  sessionAffinity: None
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: centralui-mapping
      prefix: /
      rewrite: /
      service: centraldashboard.kubeflow
  labels:
    app: centraldashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: centraldashboard
  namespace: kubeflow
spec:
  ports:
    - port: 80
      targetPort: 8082
  selector:
    app: centraldashboard
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
  labels:
    app: jupyter
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-0
  namespace: kubeflow
spec:
  clusterIP: None
  ports:
    - name: hub
      port: 8000
  selector:
    app: jupyter
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: jupyter-lb-hub-mapping
      prefix: /hub/
      rewrite: /hub/
      timeout_ms: 300000
      service: jupyter-lb.kubeflow
      use_websocket: true
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: jupyter-lb-user-mapping
      prefix: /user/
      rewrite: /user/
      timeout_ms: 300000
      service: jupyter-lb.kubeflow
      use_websocket: true
  labels:
    app: jupyter-lb
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-lb
  namespace: kubeflow
spec:
  ports:
    - name: hub
      port: 80
      targetPort: 8000
  selector:
    app: jupyter
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: "---\napiVersion: ambassador/v0\nkind:  Mapping\nname:
      \ webapp_mapping\nprefix: /jupyter/\nservice: jupyter-web-app.kubeflow\nadd_request_headers:
      \n  x-forwarded-prefix: /jupyter"
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
    run: jupyter-web-app
  name: jupyter-web-app
  namespace: kubeflow
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 5000
  selector:
    app: jupyter-web-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: katib-ui-mapping
      prefix: /katib/
      rewrite: /katib/
      service: katib-ui.kubeflow
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: ui
    ksonnet.io/component: application
  name: katib-ui
  namespace: kubeflow
spec:
  ports:
    - name: ui
      port: 80
      protocol: TCP
  selector:
    app: vizier
    component: ui
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    ksonnet.io/component: application
  name: kfapp-controller
  namespace: kubeflow
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: kfapp-controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: minio-service
  namespace: kubeflow
spec:
  ports:
    - port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app: minio
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ml-pipeline
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline
  namespace: kubeflow
spec:
  ports:
    - name: http
      port: 8888
      protocol: TCP
      targetPort: 8888
    - name: grpc
      port: 8887
      protocol: TCP
      targetPort: 8887
  selector:
    app: ml-pipeline
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: pipeline-tensorboard-ui-mapping
      prefix: /data
      rewrite: /data
      timeout_ms: 300000
      service: ml-pipeline-ui.kubeflow
      use_websocket: true
  labels:
    app: ml-pipeline-tensorboard-ui
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-tensorboard-ui
  namespace: kubeflow
spec:
  ports:
    - port: 80
      targetPort: 3000
  selector:
    app: ml-pipeline-tensorboard-ui
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: pipelineui-mapping
      prefix: /pipeline
      rewrite: /pipeline
      timeout_ms: 300000
      service: ml-pipeline-ui.kubeflow
      use_websocket: true
  labels:
    app: ml-pipeline-ui
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-ui
  namespace: kubeflow
spec:
  ports:
    - port: 80
      targetPort: 3000
  selector:
    app: ml-pipeline-ui
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: mysql
  namespace: kubeflow
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: notebooks-controller
  namespace: kubeflow
spec:
  ports:
    - port: 443
  selector:
    app: notebooks-controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: profiles
  namespace: kubeflow
spec:
  ports:
    - port: 443
  selector:
    app: profiles
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: studyjob-controller
  namespace: kubeflow
spec:
  ports:
    - port: 443
      protocol: TCP
  selector:
    app: studyjob-controller
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    getambassador.io/config: |-
      ---
      apiVersion: ambassador/v0
      kind:  Mapping
      name: tfjobs-ui-mapping
      prefix: /tfjobs/
      rewrite: /tfjobs/
      service: tf-job-dashboard.kubeflow
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-dashboard
  namespace: kubeflow
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: tf-job-dashboard
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: core
    ksonnet.io/component: application
  name: vizier-core
  namespace: kubeflow
spec:
  ports:
    - name: api
      port: 6789
      protocol: TCP
  selector:
    app: vizier
    component: core
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: core-rest
    ksonnet.io/component: application
  name: vizier-core-rest
  namespace: kubeflow
spec:
  ports:
    - name: api
      port: 80
      protocol: TCP
  selector:
    app: vizier
    component: core-rest
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: db
    ksonnet.io/component: application
  name: vizier-db
  namespace: kubeflow
spec:
  ports:
    - name: dbapi
      port: 3306
      protocol: TCP
  selector:
    app: vizier
    component: db
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: suggestion-bayesianoptimization
    ksonnet.io/component: application
  name: vizier-suggestion-bayesianoptimization
  namespace: kubeflow
spec:
  ports:
    - name: api
      port: 6789
      protocol: TCP
  selector:
    app: vizier
    component: suggestion-bayesianoptimization
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: suggestion-grid
    ksonnet.io/component: application
  name: vizier-suggestion-grid
  namespace: kubeflow
spec:
  ports:
    - name: api
      port: 6789
      protocol: TCP
  selector:
    app: vizier
    component: suggestion-grid
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: suggestion-hyperband
    ksonnet.io/component: application
  name: vizier-suggestion-hyperband
  namespace: kubeflow
spec:
  ports:
    - name: api
      port: 6789
      protocol: TCP
  selector:
    app: vizier
    component: suggestion-hyperband
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: suggestion-random
    ksonnet.io/component: application
  name: vizier-suggestion-random
  namespace: kubeflow
spec:
  ports:
    - name: api
      port: 6789
      protocol: TCP
  selector:
    app: vizier
    component: suggestion-random
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: alb-ingress-controller
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: alb-ingress-controller
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alb-ingress-controller
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: alb-ingress-controller
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - args:
            - --ingress-class=alb
            - --cluster-name=kubeflow-aws
          image: docker.io/amazon/aws-alb-ingress-controller:v1.1.0
          imagePullPolicy: Always
          name: alb-ingress-controller
          resources: {}
          terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      serviceAccount: alb-ingress-controller
      serviceAccountName: alb-ingress-controller
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: jupyter-web-app
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter-web-app
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyter-web-app
  template:
    metadata:
      labels:
        app: jupyter-web-app
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - env:
            - name: ROK_SECRET_NAME
              value: secret-rok-{username}
            - name: UI
              value: default
          image: gcr.io/kubeflow-images-public/jupyter-web-app:v0.5.0
          imagePullPolicy: Always
          name: jupyter-web-app
          ports:
            - containerPort: 5000
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
      serviceAccountName: jupyter-web-app
      volumes:
        - configMap:
            name: jupyter-web-app-config
          name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: profiles
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: profiles
  template:
    metadata:
      labels:
        app: profiles
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - command:
            - /manager
          image: gcr.io/kubeflow-images-public/profile-controller:v20190228-v0.4.0-rc.1-192-g1a802656-dirty-f95773
          imagePullPolicy: Always
          name: manager
      serviceAccountName: profiles
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ambassador
  namespace: kubeflow
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kfapp
        service: ambassador
      namespace: kubeflow
    spec:
      containers:
        - env:
            - name: AMBASSADOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: quay.io/datawire/ambassador:0.37.0
          livenessProbe:
            httpGet:
              path: /ambassador/v0/check_alive
              port: 8877
            initialDelaySeconds: 30
            periodSeconds: 30
          name: ambassador
          readinessProbe:
            httpGet:
              path: /ambassador/v0/check_ready
              port: 8877
            initialDelaySeconds: 30
            periodSeconds: 30
          resources:
            limits:
              cpu: 1
              memory: 400Mi
            requests:
              cpu: 200m
              memory: 100Mi
      restartPolicy: Always
      serviceAccountName: ambassador
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    ksonnet.io/component: application
  name: kfapp-controller
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: kfapp-controller
  template:
    metadata:
      labels:
        app: kfapp-controller
    spec:
      containers:
        - image: metacontroller/jsonnetd@sha256:25c25f217ad030a0f67e37078c33194785b494569b0c088d8df4f00da8fd15a0
          imagePullPolicy: Always
          name: hooks
          volumeMounts:
            - mountPath: /opt/isolation/operator/hooks
              name: hooks
          workingDir: /opt/isolation/operator/hooks
      volumes:
        - configMap:
            name: kfapp-controller-hooks
          name: hooks
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: minio
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: minio
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - args:
            - server
            - /data
          env:
            - name: MINIO_ACCESS_KEY
              value: minio
            - name: MINIO_SECRET_KEY
              value: minio123
          image: minio/minio:RELEASE.2018-02-09T22-40-05Z
          name: minio
          ports:
            - containerPort: 9000
          volumeMounts:
            - mountPath: /data
              name: data
              subPath: minio
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio-pvc
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: notebooks-controller
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: notebooks-controller
  template:
    metadata:
      labels:
        app: notebooks-controller
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - command:
            - /manager
          env:
            - name: POD_LABELS
              value: gcp-cred-secret=user-gcp-sa,gcp-cred-secret-filename=user-gcp-sa.json
          image: gcr.io/kubeflow-images-public/notebook-controller:v20190401-v0.4.0-rc.1-308-g33618cc9-e3b0c4
          imagePullPolicy: Always
          name: manager
      serviceAccountName: notebook-controller
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: ml-pipeline
  template:
    metadata:
      labels:
        app: ml-pipeline
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/ml-pipeline/api-server:0.1.16
          imagePullPolicy: IfNotPresent
          name: ml-pipeline-api-server
          ports:
            - containerPort: 8888
            - containerPort: 8887
      serviceAccountName: ml-pipeline
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline-persistenceagent
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-persistenceagent
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: ml-pipeline-persistenceagent
  template:
    metadata:
      labels:
        app: ml-pipeline-persistenceagent
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/ml-pipeline/persistenceagent:0.1.16
          imagePullPolicy: IfNotPresent
          name: ml-pipeline-persistenceagent
      serviceAccountName: ml-pipeline-persistenceagent
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline-scheduledworkflow
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-scheduledworkflow
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: ml-pipeline-scheduledworkflow
  template:
    metadata:
      labels:
        app: ml-pipeline-scheduledworkflow
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/ml-pipeline/scheduledworkflow:0.1.16
          imagePullPolicy: IfNotPresent
          name: ml-pipeline-scheduledworkflow
      serviceAccountName: ml-pipeline-scheduledworkflow
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline-ui
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-ui
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: ml-pipeline-ui
  template:
    metadata:
      labels:
        app: ml-pipeline-ui
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - image: gcr.io/ml-pipeline/frontend:0.1.16
          imagePullPolicy: IfNotPresent
          name: ml-pipeline-ui
          ports:
            - containerPort: 3000
      serviceAccountName: ml-pipeline-ui
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app: ml-pipeline-viewer-crd
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: ml-pipeline-viewer-controller-deployment
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: ml-pipeline-viewer-crd
  template:
    metadata:
      labels:
        app: ml-pipeline-viewer-crd
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/ml-pipeline/viewer-crd-controller:0.1.16
          imagePullPolicy: Always
          name: ml-pipeline-viewer-controller
      serviceAccountName: ml-pipeline-viewer-crd-service-account
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: mysql
  namespace: kubeflow
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "true"
          image: mysql:5.6
          name: mysql
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: argo-ui
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: argo-ui
  namespace: kubeflow
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: argo-ui
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: argo-ui
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - env:
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: IN_CLUSTER
              value: "true"
            - name: BASE_HREF
              value: /argo/
          image: argoproj/argoui:v2.2.0
          imagePullPolicy: IfNotPresent
          name: argo-ui
          readinessProbe:
            httpGet:
              path: /
              port: 8001
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: argo-ui
      serviceAccountName: argo-ui
      terminationGracePeriodSeconds: 30
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: centraldashboard
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: centraldashboard
  namespace: kubeflow
spec:
  template:
    metadata:
      labels:
        app: centraldashboard
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - image: gcr.io/kubeflow-images-public/centraldashboard:v0.5.0
          name: centraldashboard
          ports:
            - containerPort: 8082
      serviceAccountName: centraldashboard
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: ui
    ksonnet.io/component: application
  name: katib-ui
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vizier
        app.kubernetes.io/name: kfapp
        component: ui
      name: katib-ui
    spec:
      containers:
        - command:
            - ./katib-ui
          image: gcr.io/kubeflow-images-public/katib/katib-ui:v0.1.2-alpha-156-g4ab3dbd
          name: katib-ui
          ports:
            - containerPort: 80
              name: ui
      serviceAccountName: katib-ui
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: pytorch-operator
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kfapp
        name: pytorch-operator
    spec:
      containers:
        - command:
            - /pytorch-operator.v1beta2
            - --alsologtostderr
            - -v=1
          env:
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          image: gcr.io/kubeflow-images-public/pytorch-operator:v0.5.0
          name: pytorch-operator
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
      serviceAccountName: pytorch-operator
      volumes:
        - configMap:
            name: pytorch-operator-config
          name: config-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: spartakus
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: spartakus-volunteer
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: spartakus-volunteer
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - args:
            - volunteer
            - --cluster-id=470388246
            - --database=https://stats-collector.kubeflow.org
          image: gcr.io/google_containers/spartakus-amd64:v1.1.0
          name: volunteer
      serviceAccountName: spartakus
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: studyjob-controller
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: studyjob-controller
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: studyjob-controller
  template:
    metadata:
      labels:
        app: studyjob-controller
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - env:
            - name: VIZIER_CORE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/kubeflow-images-public/katib/studyjob-controller:v0.1.2-alpha-156-g4ab3dbd
          imagePullPolicy: Always
          name: studyjob-controller
          ports:
            - containerPort: 443
              name: validating
      serviceAccountName: studyjob-controller
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-dashboard
  namespace: kubeflow
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kfapp
        name: tf-job-dashboard
    spec:
      containers:
        - command:
            - /opt/tensorflow_k8s/dashboard/backend
          env:
            - name: KUBEFLOW_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: gcr.io/kubeflow-images-public/tf_operator:v0.5.0
          name: tf-job-dashboard
          ports:
            - containerPort: 8080
      serviceAccountName: tf-job-dashboard
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: tf-job-operator
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kfapp
        name: tf-job-operator
    spec:
      containers:
        - command:
            - /opt/kubeflow/tf-operator.v1beta2
            - --alsologtostderr
            - -v=1
          env:
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          image: gcr.io/kubeflow-images-public/tf_operator:v0.5.0
          name: tf-job-operator
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
      serviceAccountName: tf-job-operator
      volumes:
        - configMap:
            name: tf-job-operator-config
          name: config-volume
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: core
    ksonnet.io/component: application
  name: vizier-core
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vizier
        app.kubernetes.io/name: kfapp
        component: core
      name: vizier-core
    spec:
      containers:
        - command:
            - ./vizier-manager
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_ROOT_PASSWORD
                  name: vizier-db-secrets
          image: gcr.io/kubeflow-images-public/katib/vizier-core:v0.1.2-alpha-156-g4ab3dbd
          livenessProbe:
            exec:
              command:
                - /bin/grpc_health_probe
                - -addr=:6789
            initialDelaySeconds: 10
          name: vizier-core
          ports:
            - containerPort: 6789
              name: api
          readinessProbe:
            exec:
              command:
                - /bin/grpc_health_probe
                - -addr=:6789
            initialDelaySeconds: 5
      serviceAccountName: vizier-core
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: core-rest
    ksonnet.io/component: application
  name: vizier-core-rest
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vizier
        app.kubernetes.io/name: kfapp
        component: core-rest
      name: vizier-core-rest
    spec:
      containers:
        - command:
            - ./vizier-manager-rest
          image: gcr.io/kubeflow-images-public/katib/vizier-core-rest:v0.1.2-alpha-156-g4ab3dbd
          name: vizier-core-rest
          ports:
            - containerPort: 80
              name: api
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: db
    ksonnet.io/component: application
  name: vizier-db
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vizier
        app.kubernetes.io/name: kfapp
        component: db
      name: vizier-db
    spec:
      containers:
        - args:
            - --datadir
            - /var/lib/mysql/datadir
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_ROOT_PASSWORD
                  name: vizier-db-secrets
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "true"
            - name: MYSQL_DATABASE
              value: vizier
          image: mysql:8.0.3
          name: vizier-db
          ports:
            - containerPort: 3306
              name: dbapi
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - mysql -D $$MYSQL_DATABASE -p$$MYSQL_ROOT_PASSWORD -e 'SELECT 1'
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: katib-mysql
      volumes:
        - name: katib-mysql
          persistentVolumeClaim:
            claimName: katib-mysql
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: suggestion-bayesianoptimization
    ksonnet.io/component: application
  name: vizier-suggestion-bayesianoptimization
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vizier
        app.kubernetes.io/name: kfapp
        component: suggestion-bayesianoptimization
      name: vizier-suggestion-bayesianoptimization
    spec:
      containers:
        - image: gcr.io/kubeflow-images-public/katib/suggestion-bayesianoptimization:v0.1.2-alpha-156-g4ab3dbd
          name: vizier-suggestion-bayesianoptimization
          ports:
            - containerPort: 6789
              name: api
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: suggestion-grid
    ksonnet.io/component: application
  name: vizier-suggestion-grid
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vizier
        app.kubernetes.io/name: kfapp
        component: suggestion-grid
      name: vizier-suggestion-grid
    spec:
      containers:
        - image: gcr.io/kubeflow-images-public/katib/suggestion-grid:v0.1.2-alpha-156-g4ab3dbd
          name: vizier-suggestion-grid
          ports:
            - containerPort: 6789
              name: api
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: suggestion-hyperband
    ksonnet.io/component: application
  name: vizier-suggestion-hyperband
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vizier
        app.kubernetes.io/name: kfapp
        component: suggestion-hyperband
      name: vizier-suggestion-hyperband
    spec:
      containers:
        - image: gcr.io/kubeflow-images-public/katib/suggestion-hyperband:v0.1.2-alpha-156-g4ab3dbd
          name: vizier-suggestion-hyperband
          ports:
            - containerPort: 6789
              name: api
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: vizier
    app.kubernetes.io/name: kfapp
    component: suggestion-random
    ksonnet.io/component: application
  name: vizier-suggestion-random
  namespace: kubeflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: vizier
        app.kubernetes.io/name: kfapp
        component: suggestion-random
      name: vizier-suggestion-random
    spec:
      containers:
        - image: gcr.io/kubeflow-images-public/katib/suggestion-random:v0.1.2-alpha-156-g4ab3dbd
          name: vizier-suggestion-random
          ports:
            - containerPort: 6789
              name: api
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: workflow-controller
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: workflow-controller
  namespace: kubeflow
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: workflow-controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: workflow-controller
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - args:
            - --configmap
            - workflow-controller-configmap
          command:
            - workflow-controller
          env:
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          image: argoproj/workflow-controller:v2.2.0
          imagePullPolicy: IfNotPresent
          name: workflow-controller
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: argo
      serviceAccountName: argo
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: jupyter
  namespace: kubeflow
spec:
  replicas: 1
  serviceName: ""
  template:
    metadata:
      labels:
        app: jupyter
        app.kubernetes.io/name: kfapp
    spec:
      containers:
        - command:
            - jupyterhub
            - -f
            - /etc/config/jupyter_config.py
          env:
            - name: KF_AUTHENTICATOR
              value: "null"
            - name: DEFAULT_JUPYTERLAB
              value: "false"
            - name: STORAGE_CLASS
              value: "null"
            - name: ROK_SECRET_NAME
              value: secret-rok-{username}
          image: gcr.io/kubeflow/jupyterhub-k8s:v20180531-3bb991b1
          name: jupyter
          ports:
            - containerPort: 8000
            - containerPort: 8081
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
      serviceAccountName: jupyter
      volumes:
        - configMap:
            name: jupyter-config
          name: config-volume
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: metacontroller
    ksonnet.io/component: metacontroller
  name: metacontroller
  namespace: kubeflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: metacontroller
  serviceName: ""
  template:
    metadata:
      labels:
        app: metacontroller
    spec:
      containers:
        - command:
            - /usr/bin/metacontroller
            - --logtostderr
            - -v=4
            - --discovery-interval=20s
          image: metacontroller/metacontroller:v0.3.0
          imagePullPolicy: Always
          name: metacontroller
          ports:
            - containerPort: 2345
          resources:
            limits:
              cpu: "4"
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
      serviceAccountName: meta-controller-service
---
apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    app.kubernetes.io/version: "0.5"
    ksonnet.io/component: application
  name: kfapp
  namespace: kubeflow
spec:
  assemblyPhase: Succeeded
  componentKinds:
    - group: v1
      kind: ConfigMap
    - group: apps/v1
      kind: Deployment
    - group: networking.istio.io/v1alpha3
      kind: Gateway
    - group: extensions/v1beta1
      kind: Ingress
    - group: v1
      kind: PersistentVolumeClaim
    - group: rbac.authorization.k8s.io/v1
      kind: RoleBinding
    - group: rbac.authorization.k8s.io/v1
      kind: Role
    - group: v1
      kind: Secret
    - group: v1
      kind: ServiceAccount
    - group: v1
      kind: Service
    - group: apps/v1beta1
      kind: StatefulSet
    - group: networking.istio.io/v1alpha3
      kind: VirtualService
  descriptor:
    description: ""
    icons: []
    keywords: []
    links: []
    maintainers: []
    notes: ""
    owners: []
    type: kubeflow
    version: "0.5"
  info: []
  selector:
    matchLabels:
      app.kubernetes.io/name: kfapp
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: kubeflow-gateway
  namespace: kubeflow
spec:
  selector:
    istio: ingressgateway
  servers:
    - hosts:
        - '*'
      port:
        name: http
        number: 80
        protocol: HTTP
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  labels:
    app.kubernetes.io/name: kfapp
    ksonnet.io/component: application
  name: kubeflow-routes
  namespace: kubeflow
spec:
  gateways:
    - kubeflow-gateway
  hosts:
    - '*'
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: ambassador
            port:
              number: 80
